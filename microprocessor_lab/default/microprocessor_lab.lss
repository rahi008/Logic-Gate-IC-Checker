
microprocessor_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00002372  00002406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800224  00800224  000025ca  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000025ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000124  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001197  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000035b  00000000  00000000  000038c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014fa  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  0000511c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d6  00000000  00000000  0000521c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001133  00000000  00000000  000053f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00006525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__c.1790>:
      54:	6e 61 6e 00                                         nan.

00000058 <__c.1788>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	12 e0       	ldi	r17, 0x02	; 2
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e2 e7       	ldi	r30, 0x72	; 114
     16a:	f3 e2       	ldi	r31, 0x23	; 35
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a4 32       	cpi	r26, 0x24	; 36
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	12 e0       	ldi	r17, 0x02	; 2
     17a:	a4 e2       	ldi	r26, 0x24	; 36
     17c:	b2 e0       	ldi	r27, 0x02	; 2
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a4 33       	cpi	r26, 0x34	; 52
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 0f 03 	call	0x61e	; 0x61e <main>
     18c:	0c 94 b7 11 	jmp	0x236e	; 0x236e <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <andcheck>:
#define s8 CHKB(PIND,BIT(3))

    
	void andcheck()
	{
		DDRB=0b01011011;
     194:	8b e5       	ldi	r24, 0x5B	; 91
     196:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00111011;
     198:	8b e3       	ldi	r24, 0x3B	; 59
     19a:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10100100;
     19c:	84 ea       	ldi	r24, 0xA4	; 164
     19e:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00100100;
     1a0:	84 e2       	ldi	r24, 0x24	; 36
     1a2:	82 bb       	out	0x12, r24	; 18
     1a4:	80 e1       	ldi	r24, 0x10	; 16
     1a6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a8:	29 e1       	ldi	r18, 0x19	; 25
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	31 97       	sbiw	r30, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <andcheck+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <andcheck+0x18>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     1b6:	b2 99       	sbic	0x16, 2	; 22
     1b8:	0a c0       	rjmp	.+20     	; 0x1ce <andcheck+0x3a>
     1ba:	b5 99       	sbic	0x16, 5	; 22
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <andcheck+0x3a>
     1be:	b7 99       	sbic	0x16, 7	; 22
     1c0:	06 c0       	rjmp	.+12     	; 0x1ce <andcheck+0x3a>
     1c2:	82 99       	sbic	0x10, 2	; 16
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <andcheck+0x3a>
		{
			h=0;
     1c6:	10 92 25 02 	sts	0x0225, r1
     1ca:	10 92 24 02 	sts	0x0224, r1
		}
		PORTB=0b10110110;
     1ce:	86 eb       	ldi	r24, 0xB6	; 182
     1d0:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101101;
     1d2:	8d e2       	ldi	r24, 0x2D	; 45
     1d4:	82 bb       	out	0x12, r24	; 18
     1d6:	80 e1       	ldi	r24, 0x10	; 16
     1d8:	97 e2       	ldi	r25, 0x27	; 39
     1da:	29 e1       	ldi	r18, 0x19	; 25
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	f9 01       	movw	r30, r18
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <andcheck+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e6:	d9 f7       	brne	.-10     	; 0x1de <andcheck+0x4a>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     1e8:	b2 99       	sbic	0x16, 2	; 22
     1ea:	0a c0       	rjmp	.+20     	; 0x200 <andcheck+0x6c>
     1ec:	b5 99       	sbic	0x16, 5	; 22
     1ee:	08 c0       	rjmp	.+16     	; 0x200 <andcheck+0x6c>
     1f0:	b7 99       	sbic	0x16, 7	; 22
     1f2:	06 c0       	rjmp	.+12     	; 0x200 <andcheck+0x6c>
     1f4:	82 99       	sbic	0x10, 2	; 16
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <andcheck+0x6c>
		{
			i=0;
     1f8:	10 92 27 02 	sts	0x0227, r1
     1fc:	10 92 26 02 	sts	0x0226, r1
		}
		PORTB=0b10101101;
     200:	8d ea       	ldi	r24, 0xAD	; 173
     202:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00110110;
     204:	86 e3       	ldi	r24, 0x36	; 54
     206:	82 bb       	out	0x12, r24	; 18
     208:	80 e1       	ldi	r24, 0x10	; 16
     20a:	97 e2       	ldi	r25, 0x27	; 39
     20c:	29 e1       	ldi	r18, 0x19	; 25
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	f9 01       	movw	r30, r18
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <andcheck+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	d9 f7       	brne	.-10     	; 0x210 <andcheck+0x7c>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     21a:	b2 99       	sbic	0x16, 2	; 22
     21c:	0a c0       	rjmp	.+20     	; 0x232 <andcheck+0x9e>
     21e:	b5 99       	sbic	0x16, 5	; 22
     220:	08 c0       	rjmp	.+16     	; 0x232 <andcheck+0x9e>
     222:	b7 99       	sbic	0x16, 7	; 22
     224:	06 c0       	rjmp	.+12     	; 0x232 <andcheck+0x9e>
     226:	82 99       	sbic	0x10, 2	; 16
     228:	04 c0       	rjmp	.+8      	; 0x232 <andcheck+0x9e>
		{
			j=0;
     22a:	10 92 29 02 	sts	0x0229, r1
     22e:	10 92 28 02 	sts	0x0228, r1
		}
		PORTB=0b10111111;
     232:	8f eb       	ldi	r24, 0xBF	; 191
     234:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00111111;
     236:	8f e3       	ldi	r24, 0x3F	; 63
     238:	82 bb       	out	0x12, r24	; 18
     23a:	80 e1       	ldi	r24, 0x10	; 16
     23c:	97 e2       	ldi	r25, 0x27	; 39
     23e:	29 e1       	ldi	r18, 0x19	; 25
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <andcheck+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24a:	d9 f7       	brne	.-10     	; 0x242 <andcheck+0xae>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     24c:	b2 9b       	sbis	0x16, 2	; 22
     24e:	0c c0       	rjmp	.+24     	; 0x268 <andcheck+0xd4>
     250:	b5 9b       	sbis	0x16, 5	; 22
     252:	0a c0       	rjmp	.+20     	; 0x268 <andcheck+0xd4>
     254:	b7 9b       	sbis	0x16, 7	; 22
     256:	08 c0       	rjmp	.+16     	; 0x268 <andcheck+0xd4>
     258:	82 9b       	sbis	0x10, 2	; 16
     25a:	06 c0       	rjmp	.+12     	; 0x268 <andcheck+0xd4>
		{
			k=1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 2b 02 	sts	0x022B, r25
     264:	80 93 2a 02 	sts	0x022A, r24
     268:	08 95       	ret

0000026a <orcheck>:
		}
		return;
	}
	void orcheck()
	{
		DDRB=0b01011011;
     26a:	8b e5       	ldi	r24, 0x5B	; 91
     26c:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00111011;
     26e:	8b e3       	ldi	r24, 0x3B	; 59
     270:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10100100;
     272:	84 ea       	ldi	r24, 0xA4	; 164
     274:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00100100;
     276:	84 e2       	ldi	r24, 0x24	; 36
     278:	82 bb       	out	0x12, r24	; 18
     27a:	80 e1       	ldi	r24, 0x10	; 16
     27c:	97 e2       	ldi	r25, 0x27	; 39
     27e:	29 e1       	ldi	r18, 0x19	; 25
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <orcheck+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     288:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28a:	d9 f7       	brne	.-10     	; 0x282 <orcheck+0x18>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     28c:	b2 99       	sbic	0x16, 2	; 22
     28e:	0a c0       	rjmp	.+20     	; 0x2a4 <orcheck+0x3a>
     290:	b5 99       	sbic	0x16, 5	; 22
     292:	08 c0       	rjmp	.+16     	; 0x2a4 <orcheck+0x3a>
     294:	b7 99       	sbic	0x16, 7	; 22
     296:	06 c0       	rjmp	.+12     	; 0x2a4 <orcheck+0x3a>
     298:	82 99       	sbic	0x10, 2	; 16
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <orcheck+0x3a>
		{
			h=0;
     29c:	10 92 25 02 	sts	0x0225, r1
     2a0:	10 92 24 02 	sts	0x0224, r1
		}
		PORTB=0b10110110;
     2a4:	86 eb       	ldi	r24, 0xB6	; 182
     2a6:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101101;
     2a8:	8d e2       	ldi	r24, 0x2D	; 45
     2aa:	82 bb       	out	0x12, r24	; 18
     2ac:	80 e1       	ldi	r24, 0x10	; 16
     2ae:	97 e2       	ldi	r25, 0x27	; 39
     2b0:	29 e1       	ldi	r18, 0x19	; 25
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	f9 01       	movw	r30, r18
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <orcheck+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <orcheck+0x4a>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     2be:	b2 9b       	sbis	0x16, 2	; 22
     2c0:	0c c0       	rjmp	.+24     	; 0x2da <orcheck+0x70>
     2c2:	b5 9b       	sbis	0x16, 5	; 22
     2c4:	0a c0       	rjmp	.+20     	; 0x2da <orcheck+0x70>
     2c6:	b7 9b       	sbis	0x16, 7	; 22
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <orcheck+0x70>
     2ca:	82 9b       	sbis	0x10, 2	; 16
     2cc:	06 c0       	rjmp	.+12     	; 0x2da <orcheck+0x70>
		{
			i=1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	90 93 27 02 	sts	0x0227, r25
     2d6:	80 93 26 02 	sts	0x0226, r24
		}
		PORTB=0b10101101;
     2da:	8d ea       	ldi	r24, 0xAD	; 173
     2dc:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00110110;
     2de:	86 e3       	ldi	r24, 0x36	; 54
     2e0:	82 bb       	out	0x12, r24	; 18
     2e2:	80 e1       	ldi	r24, 0x10	; 16
     2e4:	97 e2       	ldi	r25, 0x27	; 39
     2e6:	29 e1       	ldi	r18, 0x19	; 25
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	f9 01       	movw	r30, r18
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <orcheck+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <orcheck+0x80>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     2f4:	b2 9b       	sbis	0x16, 2	; 22
     2f6:	0c c0       	rjmp	.+24     	; 0x310 <orcheck+0xa6>
     2f8:	b5 9b       	sbis	0x16, 5	; 22
     2fa:	0a c0       	rjmp	.+20     	; 0x310 <orcheck+0xa6>
     2fc:	b7 9b       	sbis	0x16, 7	; 22
     2fe:	08 c0       	rjmp	.+16     	; 0x310 <orcheck+0xa6>
     300:	82 9b       	sbis	0x10, 2	; 16
     302:	06 c0       	rjmp	.+12     	; 0x310 <orcheck+0xa6>
		{
			j=1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	90 93 29 02 	sts	0x0229, r25
     30c:	80 93 28 02 	sts	0x0228, r24
		}
		PORTB=0b10111111;
     310:	8f eb       	ldi	r24, 0xBF	; 191
     312:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00111111;
     314:	8f e3       	ldi	r24, 0x3F	; 63
     316:	82 bb       	out	0x12, r24	; 18
     318:	80 e1       	ldi	r24, 0x10	; 16
     31a:	97 e2       	ldi	r25, 0x27	; 39
     31c:	29 e1       	ldi	r18, 0x19	; 25
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	31 97       	sbiw	r30, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <orcheck+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     328:	d9 f7       	brne	.-10     	; 0x320 <orcheck+0xb6>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     32a:	b2 9b       	sbis	0x16, 2	; 22
     32c:	0c c0       	rjmp	.+24     	; 0x346 <orcheck+0xdc>
     32e:	b5 9b       	sbis	0x16, 5	; 22
     330:	0a c0       	rjmp	.+20     	; 0x346 <orcheck+0xdc>
     332:	b7 9b       	sbis	0x16, 7	; 22
     334:	08 c0       	rjmp	.+16     	; 0x346 <orcheck+0xdc>
     336:	82 9b       	sbis	0x10, 2	; 16
     338:	06 c0       	rjmp	.+12     	; 0x346 <orcheck+0xdc>
		{
			k=1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	90 93 2b 02 	sts	0x022B, r25
     342:	80 93 2a 02 	sts	0x022A, r24
     346:	08 95       	ret

00000348 <nandcheck>:
		return;
		
	}
	void nandcheck()
	{
		DDRB=0b01011011;
     348:	8b e5       	ldi	r24, 0x5B	; 91
     34a:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00111011;
     34c:	8b e3       	ldi	r24, 0x3B	; 59
     34e:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10100100;
     350:	84 ea       	ldi	r24, 0xA4	; 164
     352:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00100100;
     354:	84 e2       	ldi	r24, 0x24	; 36
     356:	82 bb       	out	0x12, r24	; 18
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	97 e2       	ldi	r25, 0x27	; 39
     35c:	29 e1       	ldi	r18, 0x19	; 25
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	f9 01       	movw	r30, r18
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <nandcheck+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     368:	d9 f7       	brne	.-10     	; 0x360 <nandcheck+0x18>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     36a:	b2 9b       	sbis	0x16, 2	; 22
     36c:	0c c0       	rjmp	.+24     	; 0x386 <nandcheck+0x3e>
     36e:	b5 9b       	sbis	0x16, 5	; 22
     370:	0a c0       	rjmp	.+20     	; 0x386 <nandcheck+0x3e>
     372:	b7 9b       	sbis	0x16, 7	; 22
     374:	08 c0       	rjmp	.+16     	; 0x386 <nandcheck+0x3e>
     376:	82 9b       	sbis	0x10, 2	; 16
     378:	06 c0       	rjmp	.+12     	; 0x386 <nandcheck+0x3e>
		{
			h=1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	90 93 25 02 	sts	0x0225, r25
     382:	80 93 24 02 	sts	0x0224, r24
		}
		PORTB=0b10110110;
     386:	86 eb       	ldi	r24, 0xB6	; 182
     388:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101101;
     38a:	8d e2       	ldi	r24, 0x2D	; 45
     38c:	82 bb       	out	0x12, r24	; 18
     38e:	80 e1       	ldi	r24, 0x10	; 16
     390:	97 e2       	ldi	r25, 0x27	; 39
     392:	29 e1       	ldi	r18, 0x19	; 25
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	f9 01       	movw	r30, r18
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <nandcheck+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     39e:	d9 f7       	brne	.-10     	; 0x396 <nandcheck+0x4e>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     3a0:	b2 9b       	sbis	0x16, 2	; 22
     3a2:	0c c0       	rjmp	.+24     	; 0x3bc <nandcheck+0x74>
     3a4:	b5 9b       	sbis	0x16, 5	; 22
     3a6:	0a c0       	rjmp	.+20     	; 0x3bc <nandcheck+0x74>
     3a8:	b7 9b       	sbis	0x16, 7	; 22
     3aa:	08 c0       	rjmp	.+16     	; 0x3bc <nandcheck+0x74>
     3ac:	82 9b       	sbis	0x10, 2	; 16
     3ae:	06 c0       	rjmp	.+12     	; 0x3bc <nandcheck+0x74>
		{
			i=1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	90 93 27 02 	sts	0x0227, r25
     3b8:	80 93 26 02 	sts	0x0226, r24
		}
		PORTB=0b10101101;
     3bc:	8d ea       	ldi	r24, 0xAD	; 173
     3be:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00110110;
     3c0:	86 e3       	ldi	r24, 0x36	; 54
     3c2:	82 bb       	out	0x12, r24	; 18
     3c4:	80 e1       	ldi	r24, 0x10	; 16
     3c6:	97 e2       	ldi	r25, 0x27	; 39
     3c8:	29 e1       	ldi	r18, 0x19	; 25
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <nandcheck+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d4:	d9 f7       	brne	.-10     	; 0x3cc <nandcheck+0x84>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     3d6:	b2 9b       	sbis	0x16, 2	; 22
     3d8:	0c c0       	rjmp	.+24     	; 0x3f2 <nandcheck+0xaa>
     3da:	b5 9b       	sbis	0x16, 5	; 22
     3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <nandcheck+0xaa>
     3de:	b7 9b       	sbis	0x16, 7	; 22
     3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <nandcheck+0xaa>
     3e2:	82 9b       	sbis	0x10, 2	; 16
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <nandcheck+0xaa>
		{
			j=1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 29 02 	sts	0x0229, r25
     3ee:	80 93 28 02 	sts	0x0228, r24
		}
		PORTB=0b10111111;
     3f2:	8f eb       	ldi	r24, 0xBF	; 191
     3f4:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00111111;
     3f6:	8f e3       	ldi	r24, 0x3F	; 63
     3f8:	82 bb       	out	0x12, r24	; 18
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	97 e2       	ldi	r25, 0x27	; 39
     3fe:	29 e1       	ldi	r18, 0x19	; 25
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <nandcheck+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     408:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40a:	d9 f7       	brne	.-10     	; 0x402 <nandcheck+0xba>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     40c:	b2 99       	sbic	0x16, 2	; 22
     40e:	0a c0       	rjmp	.+20     	; 0x424 <nandcheck+0xdc>
     410:	b5 99       	sbic	0x16, 5	; 22
     412:	08 c0       	rjmp	.+16     	; 0x424 <nandcheck+0xdc>
     414:	b7 99       	sbic	0x16, 7	; 22
     416:	06 c0       	rjmp	.+12     	; 0x424 <nandcheck+0xdc>
     418:	82 99       	sbic	0x10, 2	; 16
     41a:	04 c0       	rjmp	.+8      	; 0x424 <nandcheck+0xdc>
		{
			k=0;
     41c:	10 92 2b 02 	sts	0x022B, r1
     420:	10 92 2a 02 	sts	0x022A, r1
     424:	08 95       	ret

00000426 <norcheck>:
		
		
	}
	void norcheck()
	{
		DDRB=0b01011011;
     426:	8b e5       	ldi	r24, 0x5B	; 91
     428:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00111011;
     42a:	8b e3       	ldi	r24, 0x3B	; 59
     42c:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10100100;
     42e:	84 ea       	ldi	r24, 0xA4	; 164
     430:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00100100;
     432:	84 e2       	ldi	r24, 0x24	; 36
     434:	82 bb       	out	0x12, r24	; 18
     436:	80 e1       	ldi	r24, 0x10	; 16
     438:	97 e2       	ldi	r25, 0x27	; 39
     43a:	29 e1       	ldi	r18, 0x19	; 25
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	f9 01       	movw	r30, r18
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <norcheck+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     444:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     446:	d9 f7       	brne	.-10     	; 0x43e <norcheck+0x18>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     448:	b2 9b       	sbis	0x16, 2	; 22
     44a:	0c c0       	rjmp	.+24     	; 0x464 <norcheck+0x3e>
     44c:	b5 9b       	sbis	0x16, 5	; 22
     44e:	0a c0       	rjmp	.+20     	; 0x464 <norcheck+0x3e>
     450:	b7 9b       	sbis	0x16, 7	; 22
     452:	08 c0       	rjmp	.+16     	; 0x464 <norcheck+0x3e>
     454:	82 9b       	sbis	0x10, 2	; 16
     456:	06 c0       	rjmp	.+12     	; 0x464 <norcheck+0x3e>
		{
			h=1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 25 02 	sts	0x0225, r25
     460:	80 93 24 02 	sts	0x0224, r24
		}
		PORTB=0b10110110;
     464:	86 eb       	ldi	r24, 0xB6	; 182
     466:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101101;
     468:	8d e2       	ldi	r24, 0x2D	; 45
     46a:	82 bb       	out	0x12, r24	; 18
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	97 e2       	ldi	r25, 0x27	; 39
     470:	29 e1       	ldi	r18, 0x19	; 25
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	f9 01       	movw	r30, r18
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <norcheck+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     47a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47c:	d9 f7       	brne	.-10     	; 0x474 <norcheck+0x4e>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     47e:	b2 99       	sbic	0x16, 2	; 22
     480:	0a c0       	rjmp	.+20     	; 0x496 <norcheck+0x70>
     482:	b5 99       	sbic	0x16, 5	; 22
     484:	08 c0       	rjmp	.+16     	; 0x496 <norcheck+0x70>
     486:	b7 99       	sbic	0x16, 7	; 22
     488:	06 c0       	rjmp	.+12     	; 0x496 <norcheck+0x70>
     48a:	82 99       	sbic	0x10, 2	; 16
     48c:	04 c0       	rjmp	.+8      	; 0x496 <norcheck+0x70>
		{
			i=0;
     48e:	10 92 27 02 	sts	0x0227, r1
     492:	10 92 26 02 	sts	0x0226, r1
		}
		PORTB=0b10101101;
     496:	8d ea       	ldi	r24, 0xAD	; 173
     498:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00110110;
     49a:	86 e3       	ldi	r24, 0x36	; 54
     49c:	82 bb       	out	0x12, r24	; 18
     49e:	80 e1       	ldi	r24, 0x10	; 16
     4a0:	97 e2       	ldi	r25, 0x27	; 39
     4a2:	29 e1       	ldi	r18, 0x19	; 25
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	f9 01       	movw	r30, r18
     4a8:	31 97       	sbiw	r30, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <norcheck+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ae:	d9 f7       	brne	.-10     	; 0x4a6 <norcheck+0x80>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     4b0:	b2 99       	sbic	0x16, 2	; 22
     4b2:	0a c0       	rjmp	.+20     	; 0x4c8 <norcheck+0xa2>
     4b4:	b5 99       	sbic	0x16, 5	; 22
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <norcheck+0xa2>
     4b8:	b7 99       	sbic	0x16, 7	; 22
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <norcheck+0xa2>
     4bc:	82 99       	sbic	0x10, 2	; 16
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <norcheck+0xa2>
		{
			j=0;
     4c0:	10 92 29 02 	sts	0x0229, r1
     4c4:	10 92 28 02 	sts	0x0228, r1
		}
		PORTB=0b10111111;
     4c8:	8f eb       	ldi	r24, 0xBF	; 191
     4ca:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00111111;
     4cc:	8f e3       	ldi	r24, 0x3F	; 63
     4ce:	82 bb       	out	0x12, r24	; 18
     4d0:	80 e1       	ldi	r24, 0x10	; 16
     4d2:	97 e2       	ldi	r25, 0x27	; 39
     4d4:	29 e1       	ldi	r18, 0x19	; 25
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <norcheck+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e0:	d9 f7       	brne	.-10     	; 0x4d8 <norcheck+0xb2>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     4e2:	b2 99       	sbic	0x16, 2	; 22
     4e4:	0a c0       	rjmp	.+20     	; 0x4fa <norcheck+0xd4>
     4e6:	b5 99       	sbic	0x16, 5	; 22
     4e8:	08 c0       	rjmp	.+16     	; 0x4fa <norcheck+0xd4>
     4ea:	b7 99       	sbic	0x16, 7	; 22
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <norcheck+0xd4>
     4ee:	82 99       	sbic	0x10, 2	; 16
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <norcheck+0xd4>
		{
			k=0;
     4f2:	10 92 2b 02 	sts	0x022B, r1
     4f6:	10 92 2a 02 	sts	0x022A, r1
     4fa:	08 95       	ret

000004fc <xorcheck>:
		return;
		
	}
	void xorcheck()
	{
		DDRB=0b01011011;
     4fc:	8b e5       	ldi	r24, 0x5B	; 91
     4fe:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00111011;
     500:	8b e3       	ldi	r24, 0x3B	; 59
     502:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10100100;
     504:	84 ea       	ldi	r24, 0xA4	; 164
     506:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00100100;
     508:	84 e2       	ldi	r24, 0x24	; 36
     50a:	82 bb       	out	0x12, r24	; 18
     50c:	80 e1       	ldi	r24, 0x10	; 16
     50e:	97 e2       	ldi	r25, 0x27	; 39
     510:	29 e1       	ldi	r18, 0x19	; 25
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	f9 01       	movw	r30, r18
     516:	31 97       	sbiw	r30, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <xorcheck+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     51c:	d9 f7       	brne	.-10     	; 0x514 <xorcheck+0x18>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     51e:	b2 99       	sbic	0x16, 2	; 22
     520:	0a c0       	rjmp	.+20     	; 0x536 <xorcheck+0x3a>
     522:	b5 99       	sbic	0x16, 5	; 22
     524:	08 c0       	rjmp	.+16     	; 0x536 <xorcheck+0x3a>
     526:	b7 99       	sbic	0x16, 7	; 22
     528:	06 c0       	rjmp	.+12     	; 0x536 <xorcheck+0x3a>
     52a:	82 99       	sbic	0x10, 2	; 16
     52c:	04 c0       	rjmp	.+8      	; 0x536 <xorcheck+0x3a>
		{
			h=0;
     52e:	10 92 25 02 	sts	0x0225, r1
     532:	10 92 24 02 	sts	0x0224, r1
		}
		PORTB=0b10110110;
     536:	86 eb       	ldi	r24, 0xB6	; 182
     538:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101101;
     53a:	8d e2       	ldi	r24, 0x2D	; 45
     53c:	82 bb       	out	0x12, r24	; 18
     53e:	80 e1       	ldi	r24, 0x10	; 16
     540:	97 e2       	ldi	r25, 0x27	; 39
     542:	29 e1       	ldi	r18, 0x19	; 25
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	f9 01       	movw	r30, r18
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <xorcheck+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     54e:	d9 f7       	brne	.-10     	; 0x546 <xorcheck+0x4a>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     550:	b2 9b       	sbis	0x16, 2	; 22
     552:	0c c0       	rjmp	.+24     	; 0x56c <xorcheck+0x70>
     554:	b5 9b       	sbis	0x16, 5	; 22
     556:	0a c0       	rjmp	.+20     	; 0x56c <xorcheck+0x70>
     558:	b7 9b       	sbis	0x16, 7	; 22
     55a:	08 c0       	rjmp	.+16     	; 0x56c <xorcheck+0x70>
     55c:	82 9b       	sbis	0x10, 2	; 16
     55e:	06 c0       	rjmp	.+12     	; 0x56c <xorcheck+0x70>
		{
			i=1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 27 02 	sts	0x0227, r25
     568:	80 93 26 02 	sts	0x0226, r24
		}
		PORTB=0b10101101;
     56c:	8d ea       	ldi	r24, 0xAD	; 173
     56e:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00110110;
     570:	86 e3       	ldi	r24, 0x36	; 54
     572:	82 bb       	out	0x12, r24	; 18
     574:	80 e1       	ldi	r24, 0x10	; 16
     576:	97 e2       	ldi	r25, 0x27	; 39
     578:	29 e1       	ldi	r18, 0x19	; 25
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	f9 01       	movw	r30, r18
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <xorcheck+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     582:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     584:	d9 f7       	brne	.-10     	; 0x57c <xorcheck+0x80>
		_delay_ms(1000);
		
		if(s0 && s1 && s2 && s3)
     586:	b2 9b       	sbis	0x16, 2	; 22
     588:	0c c0       	rjmp	.+24     	; 0x5a2 <xorcheck+0xa6>
     58a:	b5 9b       	sbis	0x16, 5	; 22
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <xorcheck+0xa6>
     58e:	b7 9b       	sbis	0x16, 7	; 22
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <xorcheck+0xa6>
     592:	82 9b       	sbis	0x10, 2	; 16
     594:	06 c0       	rjmp	.+12     	; 0x5a2 <xorcheck+0xa6>
		{
			j=1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	90 93 29 02 	sts	0x0229, r25
     59e:	80 93 28 02 	sts	0x0228, r24
		}
		PORTB=0b10111111;
     5a2:	8f eb       	ldi	r24, 0xBF	; 191
     5a4:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00111111;
     5a6:	8f e3       	ldi	r24, 0x3F	; 63
     5a8:	82 bb       	out	0x12, r24	; 18
     5aa:	80 e1       	ldi	r24, 0x10	; 16
     5ac:	97 e2       	ldi	r25, 0x27	; 39
     5ae:	29 e1       	ldi	r18, 0x19	; 25
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	f9 01       	movw	r30, r18
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <xorcheck+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <xorcheck+0xb6>
		_delay_ms(1000);
		
		if(!s0 && !s1 && !s2 && !s3)
     5bc:	b2 99       	sbic	0x16, 2	; 22
     5be:	0a c0       	rjmp	.+20     	; 0x5d4 <xorcheck+0xd8>
     5c0:	b5 99       	sbic	0x16, 5	; 22
     5c2:	08 c0       	rjmp	.+16     	; 0x5d4 <xorcheck+0xd8>
     5c4:	b7 99       	sbic	0x16, 7	; 22
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <xorcheck+0xd8>
     5c8:	82 99       	sbic	0x10, 2	; 16
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <xorcheck+0xd8>
		{
			k=0;
     5cc:	10 92 2b 02 	sts	0x022B, r1
     5d0:	10 92 2a 02 	sts	0x022A, r1
     5d4:	08 95       	ret

000005d6 <notcheck>:
		return;
		
	}
	void notcheck()
	{
		DDRB=0b01010101;
     5d6:	85 e5       	ldi	r24, 0x55	; 85
     5d8:	87 bb       	out	0x17, r24	; 23
		DDRD=0b00110101;
     5da:	85 e3       	ldi	r24, 0x35	; 53
     5dc:	81 bb       	out	0x11, r24	; 17
		PORTB=0b10101010;
     5de:	8a ea       	ldi	r24, 0xAA	; 170
     5e0:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00101010;
     5e2:	8a e2       	ldi	r24, 0x2A	; 42
     5e4:	82 bb       	out	0x12, r24	; 18
     5e6:	80 e1       	ldi	r24, 0x10	; 16
     5e8:	97 e2       	ldi	r25, 0x27	; 39
     5ea:	29 e1       	ldi	r18, 0x19	; 25
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	f9 01       	movw	r30, r18
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <notcheck+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f6:	d9 f7       	brne	.-10     	; 0x5ee <notcheck+0x18>
		_delay_ms(1000);
		
		if(s1 && s4 && s5 && s6 && s7 && s8)
     5f8:	b5 9b       	sbis	0x16, 5	; 22
     5fa:	10 c0       	rjmp	.+32     	; 0x61c <notcheck+0x46>
     5fc:	b1 9b       	sbis	0x16, 1	; 22
     5fe:	0e c0       	rjmp	.+28     	; 0x61c <notcheck+0x46>
     600:	b3 9b       	sbis	0x16, 3	; 22
     602:	0c c0       	rjmp	.+24     	; 0x61c <notcheck+0x46>
     604:	b7 9b       	sbis	0x16, 7	; 22
     606:	0a c0       	rjmp	.+20     	; 0x61c <notcheck+0x46>
     608:	81 9b       	sbis	0x10, 1	; 16
     60a:	08 c0       	rjmp	.+16     	; 0x61c <notcheck+0x46>
     60c:	83 9b       	sbis	0x10, 3	; 16
     60e:	06 c0       	rjmp	.+12     	; 0x61c <notcheck+0x46>
		{
			h=1;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 25 02 	sts	0x0225, r25
     618:	80 93 24 02 	sts	0x0224, r24
     61c:	08 95       	ret

0000061e <main>:
	}



int main()
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
		
	LCDInit(LS_NONE);		//initialize lcd
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 57 0b 	call	0x16ae	; 0x16ae <LCDInit>
   	LCDWriteStringXY(0,0,"Logic Gate");
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     634:	80 e6       	ldi	r24, 0x60	; 96
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
	LCDWriteStringXY(10,1,"IC Checker");
     63c:	8a e0       	ldi	r24, 0x0A	; 10
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     644:	8b e6       	ldi	r24, 0x6B	; 107
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
	LCDWriteStringXY(3,2,"ID:1302008, 015");
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     654:	86 e7       	ldi	r24, 0x76	; 118
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     65c:	80 e3       	ldi	r24, 0x30	; 48
     65e:	95 e7       	ldi	r25, 0x75	; 117
     660:	29 e1       	ldi	r18, 0x19	; 25
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     66a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66c:	d9 f7       	brne	.-10     	; 0x664 <main+0x46>
	_delay_ms(3000);
	LCDClear(); 
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	LCDWriteStringXY(1,0,"Automatic Mode");
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     67e:	86 e8       	ldi	r24, 0x86	; 134
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
	LCDWriteStringXY(1,1,"Manual Mode");
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     68e:	85 e9       	ldi	r24, 0x95	; 149
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
	LCDWriteStringXY(0,0,">");
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     69e:	81 ea       	ldi	r24, 0xA1	; 161
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
	DDRA=0xF0;             // 4 MSB for output(columns) 4 LSB for input(rows);
     6a6:	80 ef       	ldi	r24, 0xF0	; 240
     6a8:	8a bb       	out	0x1a, r24	; 26
    PORTA=0x0F;            //enable internal pullups for PB0-PB3
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	8b bb       	out	0x1b, r24	; 27
     6ae:	09 e1       	ldi	r16, 0x19	; 25
     6b0:	10 e0       	ldi	r17, 0x00	; 0
     
   while (1) 
     {
           _delay_ms(100);
          //first column
          PORTA = 0xEF;
     6b2:	88 ea       	ldi	r24, 0xA8	; 168
     6b4:	91 e6       	ldi	r25, 0x61	; 97
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <main+0x98>
     6ba:	8f ee       	ldi	r24, 0xEF	; 239
     6bc:	8b bb       	out	0x1b, r24	; 27

          if (!(PINA & 0x04))
     6be:	ca 99       	sbic	0x19, 2	; 25
     6c0:	24 c0       	rjmp	.+72     	; 0x70a <main+0xec>
          {
             LCDWriteString("7");
     6c2:	83 ea       	ldi	r24, 0xA3	; 163
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			 //Lcd_Chr_CP('7'); (!(PINA & 0x01))
             b = (b*10) + 7;
     6ca:	80 91 2e 02 	lds	r24, 0x022E
     6ce:	90 91 2f 02 	lds	r25, 0x022F
     6d2:	9c 01       	movw	r18, r24
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	22 0f       	add	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	6a 95       	dec	r22
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0xb8>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	28 0f       	add	r18, r24
     6e4:	39 1f       	adc	r19, r25
     6e6:	29 5f       	subi	r18, 0xF9	; 249
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	30 93 2f 02 	sts	0x022F, r19
     6ee:	20 93 2e 02 	sts	0x022E, r18
			 n++;
     6f2:	80 91 30 02 	lds	r24, 0x0230
     6f6:	90 91 31 02 	lds	r25, 0x0231
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	90 93 31 02 	sts	0x0231, r25
     700:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x01));
     704:	c8 9b       	sbis	0x19, 0	; 25
     706:	fe cf       	rjmp	.-4      	; 0x704 <main+0xe6>
     708:	ec c3       	rjmp	.+2008   	; 0xee2 <__stack+0x683>
          }
          else if (!(PINA & 0x02))
     70a:	c9 99       	sbic	0x19, 1	; 25
     70c:	24 c0       	rjmp	.+72     	; 0x756 <main+0x138>
          {
             LCDWriteString("4");
     70e:	85 ea       	ldi	r24, 0xA5	; 165
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			 //Lcd_Chr_CP('4');
             b = (b*10) + 4;n++;
     716:	80 91 2e 02 	lds	r24, 0x022E
     71a:	90 91 2f 02 	lds	r25, 0x022F
     71e:	9c 01       	movw	r18, r24
     720:	43 e0       	ldi	r20, 0x03	; 3
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	4a 95       	dec	r20
     728:	e1 f7       	brne	.-8      	; 0x722 <main+0x104>
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	28 0f       	add	r18, r24
     730:	39 1f       	adc	r19, r25
     732:	2c 5f       	subi	r18, 0xFC	; 252
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	30 93 2f 02 	sts	0x022F, r19
     73a:	20 93 2e 02 	sts	0x022E, r18
     73e:	80 91 30 02 	lds	r24, 0x0230
     742:	90 91 31 02 	lds	r25, 0x0231
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	90 93 31 02 	sts	0x0231, r25
     74c:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x02));
     750:	c9 9b       	sbis	0x19, 1	; 25
     752:	fe cf       	rjmp	.-4      	; 0x750 <main+0x132>
     754:	c6 c3       	rjmp	.+1932   	; 0xee2 <__stack+0x683>
          }
          else if (!(PINA & 0x01))
     756:	c8 99       	sbic	0x19, 0	; 25
     758:	24 c0       	rjmp	.+72     	; 0x7a2 <main+0x184>
          {
             LCDWriteString("1");
     75a:	87 ea       	ldi	r24, 0xA7	; 167
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			 //Lcd_Chr_CP('1'); (!(PINA & 0x04))
             b = (b*10) + 1;n++;
     762:	80 91 2e 02 	lds	r24, 0x022E
     766:	90 91 2f 02 	lds	r25, 0x022F
     76a:	9c 01       	movw	r18, r24
     76c:	a3 e0       	ldi	r26, 0x03	; 3
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	aa 95       	dec	r26
     774:	e1 f7       	brne	.-8      	; 0x76e <main+0x150>
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	28 0f       	add	r18, r24
     77c:	39 1f       	adc	r19, r25
     77e:	2f 5f       	subi	r18, 0xFF	; 255
     780:	3f 4f       	sbci	r19, 0xFF	; 255
     782:	30 93 2f 02 	sts	0x022F, r19
     786:	20 93 2e 02 	sts	0x022E, r18
     78a:	80 91 30 02 	lds	r24, 0x0230
     78e:	90 91 31 02 	lds	r25, 0x0231
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	90 93 31 02 	sts	0x0231, r25
     798:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x04));
     79c:	ca 9b       	sbis	0x19, 2	; 25
     79e:	fe cf       	rjmp	.-4      	; 0x79c <main+0x17e>
     7a0:	a0 c3       	rjmp	.+1856   	; 0xee2 <__stack+0x683>
          }
          else if (!(PINA & 0x08))
     7a2:	cb 99       	sbic	0x19, 3	; 25
     7a4:	9e c3       	rjmp	.+1852   	; 0xee2 <__stack+0x683>
          {
             //all_zero();
             
			 if(a==0 && c==0)
     7a6:	80 91 2c 02 	lds	r24, 0x022C
     7aa:	90 91 2d 02 	lds	r25, 0x022D
     7ae:	89 2b       	or	r24, r25
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <main+0x196>
     7b2:	94 c1       	rjmp	.+808    	; 0xadc <__stack+0x27d>
     7b4:	80 91 32 02 	lds	r24, 0x0232
     7b8:	90 91 33 02 	lds	r25, 0x0233
     7bc:	89 2b       	or	r24, r25
     7be:	09 f0       	breq	.+2      	; 0x7c2 <main+0x1a4>
     7c0:	8d c1       	rjmp	.+794    	; 0xadc <__stack+0x27d>
			 {
			 	LCDClear();
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(3,2,"Checking IC");
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     7d2:	89 ea       	ldi	r24, 0xA9	; 169
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				nandcheck();
     7da:	0e 94 a4 01 	call	0x348	; 0x348 <nandcheck>
				if(h==1 && i==1 && j==1 && k==0)
     7de:	80 91 24 02 	lds	r24, 0x0224
     7e2:	90 91 25 02 	lds	r25, 0x0225
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	c1 f5       	brne	.+112    	; 0x85a <main+0x23c>
     7ea:	80 91 26 02 	lds	r24, 0x0226
     7ee:	90 91 27 02 	lds	r25, 0x0227
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	91 f5       	brne	.+100    	; 0x85a <main+0x23c>
     7f6:	80 91 28 02 	lds	r24, 0x0228
     7fa:	90 91 29 02 	lds	r25, 0x0229
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	61 f5       	brne	.+88     	; 0x85a <main+0x23c>
     802:	80 91 2a 02 	lds	r24, 0x022A
     806:	90 91 2b 02 	lds	r25, 0x022B
     80a:	89 2b       	or	r24, r25
     80c:	31 f5       	brne	.+76     	; 0x85a <main+0x23c>
				{
					LCDClear();
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     81e:	85 eb       	ldi	r24, 0xB5	; 181
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7400");
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     82e:	80 ec       	ldi	r24, 0xC0	; 192
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	62 e0       	ldi	r22, 0x02	; 2
     83a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     83e:	8b ec       	ldi	r24, 0xCB	; 203
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     846:	80 e3       	ldi	r24, 0x30	; 48
     848:	95 e7       	ldi	r25, 0x75	; 117
     84a:	f8 01       	movw	r30, r16
     84c:	31 97       	sbiw	r30, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <main+0x22e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     850:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     852:	d9 f7       	brne	.-10     	; 0x84a <main+0x22c>
					_delay_ms(3000);
					//LCDWriteStringXY(0,3,"  Yes          No");
					c=1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	40 c0       	rjmp	.+128    	; 0x8da <__stack+0x7b>
					
				}
				
				else
				{
					norcheck();
     85a:	0e 94 13 02 	call	0x426	; 0x426 <norcheck>
					if(h==1 && i==0 && j==0 && k==0)
     85e:	80 91 24 02 	lds	r24, 0x0224
     862:	90 91 25 02 	lds	r25, 0x0225
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
     86a:	3c c0       	rjmp	.+120    	; 0x8e4 <__stack+0x85>
     86c:	80 91 26 02 	lds	r24, 0x0226
     870:	90 91 27 02 	lds	r25, 0x0227
     874:	89 2b       	or	r24, r25
     876:	b1 f5       	brne	.+108    	; 0x8e4 <__stack+0x85>
     878:	80 91 28 02 	lds	r24, 0x0228
     87c:	90 91 29 02 	lds	r25, 0x0229
     880:	89 2b       	or	r24, r25
     882:	81 f5       	brne	.+96     	; 0x8e4 <__stack+0x85>
     884:	80 91 2a 02 	lds	r24, 0x022A
     888:	90 91 2b 02 	lds	r25, 0x022B
     88c:	89 2b       	or	r24, r25
     88e:	51 f5       	brne	.+84     	; 0x8e4 <__stack+0x85>
				{
					LCDClear();
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     8a0:	85 eb       	ldi	r24, 0xB5	; 181
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7402");
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     8b0:	8f ed       	ldi	r24, 0xDF	; 223
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	62 e0       	ldi	r22, 0x02	; 2
     8bc:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     8c0:	8b ec       	ldi	r24, 0xCB	; 203
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     8c8:	80 e3       	ldi	r24, 0x30	; 48
     8ca:	95 e7       	ldi	r25, 0x75	; 117
     8cc:	f8 01       	movw	r30, r16
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <__stack+0x6f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d4:	d9 f7       	brne	.-10     	; 0x8cc <__stack+0x6d>
					//LCDWriteStringXY(0,3,"  Yes          No");
					_delay_ms(3000);
					c=2;
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 33 02 	sts	0x0233, r25
     8de:	80 93 32 02 	sts	0x0232, r24
     8e2:	fc c0       	rjmp	.+504    	; 0xadc <__stack+0x27d>
				}
				else
				{
					notcheck();
     8e4:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <notcheck>
					if(h==1 && i==0)
     8e8:	80 91 24 02 	lds	r24, 0x0224
     8ec:	90 91 25 02 	lds	r25, 0x0225
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	61 f5       	brne	.+88     	; 0x94c <__stack+0xed>
     8f4:	80 91 26 02 	lds	r24, 0x0226
     8f8:	90 91 27 02 	lds	r25, 0x0227
     8fc:	89 2b       	or	r24, r25
     8fe:	31 f5       	brne	.+76     	; 0x94c <__stack+0xed>
					{
					LCDClear();
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     910:	85 eb       	ldi	r24, 0xB5	; 181
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7404");
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     920:	8a ee       	ldi	r24, 0xEA	; 234
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     930:	8b ec       	ldi	r24, 0xCB	; 203
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     938:	80 e3       	ldi	r24, 0x30	; 48
     93a:	95 e7       	ldi	r25, 0x75	; 117
     93c:	f8 01       	movw	r30, r16
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0xdf>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     942:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     944:	d9 f7       	brne	.-10     	; 0x93c <__stack+0xdd>
					//LCDWriteStringXY(0,3,"  Yes          No");
					_delay_ms(3000);
					c=3;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	c7 cf       	rjmp	.-114    	; 0x8da <__stack+0x7b>
				}
				else
				{
					andcheck();
     94c:	0e 94 ca 00 	call	0x194	; 0x194 <andcheck>
					if(h==0 && i==0 && j==0 && k==1)
     950:	80 91 24 02 	lds	r24, 0x0224
     954:	90 91 25 02 	lds	r25, 0x0225
     958:	89 2b       	or	r24, r25
     95a:	c1 f5       	brne	.+112    	; 0x9cc <__stack+0x16d>
     95c:	80 91 26 02 	lds	r24, 0x0226
     960:	90 91 27 02 	lds	r25, 0x0227
     964:	89 2b       	or	r24, r25
     966:	91 f5       	brne	.+100    	; 0x9cc <__stack+0x16d>
     968:	80 91 28 02 	lds	r24, 0x0228
     96c:	90 91 29 02 	lds	r25, 0x0229
     970:	89 2b       	or	r24, r25
     972:	61 f5       	brne	.+88     	; 0x9cc <__stack+0x16d>
     974:	80 91 2a 02 	lds	r24, 0x022A
     978:	90 91 2b 02 	lds	r25, 0x022B
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	31 f5       	brne	.+76     	; 0x9cc <__stack+0x16d>
				{
					LCDClear();
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     990:	85 eb       	ldi	r24, 0xB5	; 181
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7408");
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     9a0:	85 ef       	ldi	r24, 0xF5	; 245
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	62 e0       	ldi	r22, 0x02	; 2
     9ac:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     9b0:	8b ec       	ldi	r24, 0xCB	; 203
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     9b8:	80 e3       	ldi	r24, 0x30	; 48
     9ba:	95 e7       	ldi	r25, 0x75	; 117
     9bc:	f8 01       	movw	r30, r16
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <__stack+0x15f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c4:	d9 f7       	brne	.-10     	; 0x9bc <__stack+0x15d>
					//LCDWriteStringXY(0,3,"  Yes          No");
					_delay_ms(3000);
					c=4;
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	87 cf       	rjmp	.-242    	; 0x8da <__stack+0x7b>
				}
				else
				{
					orcheck();
     9cc:	0e 94 35 01 	call	0x26a	; 0x26a <orcheck>
					if(h==0 && i==1 && j==1 && k==1)
     9d0:	80 91 24 02 	lds	r24, 0x0224
     9d4:	90 91 25 02 	lds	r25, 0x0225
     9d8:	89 2b       	or	r24, r25
     9da:	c1 f5       	brne	.+112    	; 0xa4c <__stack+0x1ed>
     9dc:	80 91 26 02 	lds	r24, 0x0226
     9e0:	90 91 27 02 	lds	r25, 0x0227
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	91 f5       	brne	.+100    	; 0xa4c <__stack+0x1ed>
     9e8:	80 91 28 02 	lds	r24, 0x0228
     9ec:	90 91 29 02 	lds	r25, 0x0229
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	61 f5       	brne	.+88     	; 0xa4c <__stack+0x1ed>
     9f4:	80 91 2a 02 	lds	r24, 0x022A
     9f8:	90 91 2b 02 	lds	r25, 0x022B
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	31 f5       	brne	.+76     	; 0xa4c <__stack+0x1ed>
				{
					LCDClear();
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     a10:	85 eb       	ldi	r24, 0xB5	; 181
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7432");
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     a30:	8b ec       	ldi	r24, 0xCB	; 203
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     a38:	80 e3       	ldi	r24, 0x30	; 48
     a3a:	95 e7       	ldi	r25, 0x75	; 117
     a3c:	f8 01       	movw	r30, r16
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <__stack+0x1df>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a42:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a44:	d9 f7       	brne	.-10     	; 0xa3c <__stack+0x1dd>
					//LCDWriteStringXY(0,3,"  Yes          No");
					_delay_ms(3000);
					c=5;
     a46:	85 e0       	ldi	r24, 0x05	; 5
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	47 cf       	rjmp	.-370    	; 0x8da <__stack+0x7b>
					
				}
				else
				{
					xorcheck();
     a4c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <xorcheck>
				if(h==0 && i==1 && j==1 && k==0)
     a50:	80 91 24 02 	lds	r24, 0x0224
     a54:	90 91 25 02 	lds	r25, 0x0225
     a58:	89 2b       	or	r24, r25
     a5a:	c1 f5       	brne	.+112    	; 0xacc <__stack+0x26d>
     a5c:	80 91 26 02 	lds	r24, 0x0226
     a60:	90 91 27 02 	lds	r25, 0x0227
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	91 f5       	brne	.+100    	; 0xacc <__stack+0x26d>
     a68:	80 91 28 02 	lds	r24, 0x0228
     a6c:	90 91 29 02 	lds	r25, 0x0229
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	61 f5       	brne	.+88     	; 0xacc <__stack+0x26d>
     a74:	80 91 2a 02 	lds	r24, 0x022A
     a78:	90 91 2b 02 	lds	r25, 0x022B
     a7c:	89 2b       	or	r24, r25
     a7e:	31 f5       	brne	.+76     	; 0xacc <__stack+0x26d>
				{
					LCDClear();
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
					LCDWriteStringXY(4,0,"IC Matched");
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     a90:	85 eb       	ldi	r24, 0xB5	; 181
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,1,"IC is 7486");
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     aa0:	8b e0       	ldi	r24, 0x0B	; 11
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
					LCDWriteStringXY(0,2,"Loading Truth table");
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	62 e0       	ldi	r22, 0x02	; 2
     aac:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ab0:	8b ec       	ldi	r24, 0xCB	; 203
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
     ab8:	80 e3       	ldi	r24, 0x30	; 48
     aba:	95 e7       	ldi	r25, 0x75	; 117
     abc:	f8 01       	movw	r30, r16
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <__stack+0x25f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac4:	d9 f7       	brne	.-10     	; 0xabc <__stack+0x25d>
					//LCDWriteStringXY(0,3,"  Yes          No");
					_delay_ms(3000);
					c=6;
     ac6:	86 e0       	ldi	r24, 0x06	; 6
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	07 cf       	rjmp	.-498    	; 0x8da <__stack+0x7b>
				}
				else
				{
					LCDWriteStringXY(4,0,"IC didn't Match");
     acc:	84 e0       	ldi	r24, 0x04	; 4
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ad4:	86 e1       	ldi	r24, 0x16	; 22
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				}

				}
			 	
			 }
			 if(a==1 && c==0)
     adc:	80 91 2c 02 	lds	r24, 0x022C
     ae0:	90 91 2d 02 	lds	r25, 0x022D
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	b9 f4       	brne	.+46     	; 0xb16 <__stack+0x2b7>
     ae8:	80 91 32 02 	lds	r24, 0x0232
     aec:	90 91 33 02 	lds	r25, 0x0233
     af0:	89 2b       	or	r24, r25
     af2:	89 f4       	brne	.+34     	; 0xb16 <__stack+0x2b7>
			 {
			 	LCDClear();
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"IC No.: ");
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b04:	86 e2       	ldi	r24, 0x26	; 38
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDGotoXY(9,0);
     b0c:	89 e0       	ldi	r24, 0x09	; 9
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b14:	e4 c1       	rjmp	.+968    	; 0xede <__stack+0x67f>
				
			 }
			 else 
			 {
			 	if(c==1)
     b16:	80 91 32 02 	lds	r24, 0x0232
     b1a:	90 91 33 02 	lds	r25, 0x0233
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	91 05       	cpc	r25, r1
     b22:	19 f5       	brne	.+70     	; 0xb6a <__stack+0x30b>
			 {
			 
				LCDClear();
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1 I2 O   I1 I2 O");
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b34:	8f e2       	ldi	r24, 0x2F	; 47
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     b3c:	83 e0       	ldi	r24, 0x03	; 3
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b44:	83 e4       	ldi	r24, 0x43	; 67
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,1,"0");
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b54:	83 e4       	ldi	r24, 0x43	; 67
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"1");
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b64:	87 ea       	ldi	r24, 0xA7	; 167
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	6c c1       	rjmp	.+728    	; 0xe42 <__stack+0x5e3>
				LCDWriteStringXY(16,1,"1");
				LCDWriteStringXY(18,1,"0");
				c=0;

			 }
			 else if(c==2)
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	91 05       	cpc	r25, r1
     b6e:	09 f0       	breq	.+2      	; 0xb72 <__stack+0x313>
     b70:	53 c0       	rjmp	.+166    	; 0xc18 <__stack+0x3b9>
			 {
			 
				LCDClear();
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1 I2 O   I1 I2 O");
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b82:	8f e2       	ldi	r24, 0x2F	; 47
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     b92:	83 e4       	ldi	r24, 0x43	; 67
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,1,"0");
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ba2:	83 e4       	ldi	r24, 0x43	; 67
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"1");
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     bb2:	87 ea       	ldi	r24, 0xA7	; 167
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,2,"0");
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	62 e0       	ldi	r22, 0x02	; 2
     bbe:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     bc2:	83 e4       	ldi	r24, 0x43	; 67
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,2,"1");
     bca:	86 e0       	ldi	r24, 0x06	; 6
     bcc:	62 e0       	ldi	r22, 0x02	; 2
     bce:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     bd2:	87 ea       	ldi	r24, 0xA7	; 167
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,2,"0");
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     be2:	83 e4       	ldi	r24, 0x43	; 67
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,3,"1");
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     bf2:	87 ea       	ldi	r24, 0xA7	; 167
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,3,"0");
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	63 e0       	ldi	r22, 0x03	; 3
     bfe:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c02:	83 e4       	ldi	r24, 0x43	; 67
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,3,"0");
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c12:	83 e4       	ldi	r24, 0x43	; 67
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	45 c1       	rjmp	.+650    	; 0xea2 <__stack+0x643>
				LCDWriteStringXY(16,1,"1");
				LCDWriteStringXY(18,1,"0");
				c=0;

			 }
			 else if(c==3)
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	91 05       	cpc	r25, r1
     c1c:	39 f5       	brne	.+78     	; 0xc6c <__stack+0x40d>
			 {
			 
				LCDClear();
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1    O");
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c2e:	85 e4       	ldi	r24, 0x45	; 69
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c3e:	83 e4       	ldi	r24, 0x43	; 67
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"1");
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c4e:	87 ea       	ldi	r24, 0xA7	; 167
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,2,"1");
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c5e:	87 ea       	ldi	r24, 0xA7	; 167
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,2,"0")
     c66:	88 e0       	ldi	r24, 0x08	; 8
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	2f c1       	rjmp	.+606    	; 0xeca <__stack+0x66b>
				c=0;
					
			 }
			 else if(c==4)
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f0       	breq	.+2      	; 0xc74 <__stack+0x415>
     c72:	53 c0       	rjmp	.+166    	; 0xd1a <__stack+0x4bb>
			 {
			 
				LCDClear();
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1 I2 O   I1 I2 O");
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c84:	8f e2       	ldi	r24, 0x2F	; 47
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     c94:	83 e4       	ldi	r24, 0x43	; 67
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,1,"0");
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ca4:	83 e4       	ldi	r24, 0x43	; 67
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"0");
     cac:	88 e0       	ldi	r24, 0x08	; 8
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     cb4:	83 e4       	ldi	r24, 0x43	; 67
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,2,"0");
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     cc4:	83 e4       	ldi	r24, 0x43	; 67
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,2,"1");
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     cd4:	87 ea       	ldi	r24, 0xA7	; 167
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,2,"0");
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ce4:	83 e4       	ldi	r24, 0x43	; 67
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,3,"1");
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	63 e0       	ldi	r22, 0x03	; 3
     cf0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     cf4:	87 ea       	ldi	r24, 0xA7	; 167
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,3,"0");
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	63 e0       	ldi	r22, 0x03	; 3
     d00:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d04:	83 e4       	ldi	r24, 0x43	; 67
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,3,"0");
     d0c:	88 e0       	ldi	r24, 0x08	; 8
     d0e:	63 e0       	ldi	r22, 0x03	; 3
     d10:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d14:	83 e4       	ldi	r24, 0x43	; 67
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	56 c0       	rjmp	.+172    	; 0xdc6 <__stack+0x567>
				LCDWriteStringXY(16,1,"1");
				LCDWriteStringXY(18,1,"1");
				c=0;

			 }
			 else if(c==5)
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__stack+0x4c3>
     d20:	6b c0       	rjmp	.+214    	; 0xdf8 <__stack+0x599>
			 {
			 
				LCDClear();
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1 I2 O   I1 I2 O");
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d32:	8f e2       	ldi	r24, 0x2F	; 47
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	61 e0       	ldi	r22, 0x01	; 1
     d3e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d42:	83 e4       	ldi	r24, 0x43	; 67
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,1,"0");
     d4a:	86 e0       	ldi	r24, 0x06	; 6
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d52:	83 e4       	ldi	r24, 0x43	; 67
     d54:	91 e0       	ldi	r25, 0x01	; 1
     d56:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"0");
     d5a:	88 e0       	ldi	r24, 0x08	; 8
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d62:	83 e4       	ldi	r24, 0x43	; 67
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,2,"0");
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	62 e0       	ldi	r22, 0x02	; 2
     d6e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d72:	83 e4       	ldi	r24, 0x43	; 67
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,2,"1");
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	62 e0       	ldi	r22, 0x02	; 2
     d7e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d82:	87 ea       	ldi	r24, 0xA7	; 167
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,2,"1");
     d8a:	88 e0       	ldi	r24, 0x08	; 8
     d8c:	62 e0       	ldi	r22, 0x02	; 2
     d8e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     d92:	87 ea       	ldi	r24, 0xA7	; 167
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,3,"1");
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	63 e0       	ldi	r22, 0x03	; 3
     d9e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     da2:	87 ea       	ldi	r24, 0xA7	; 167
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,3,"0");
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     db2:	83 e4       	ldi	r24, 0x43	; 67
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,3,"1");
     dba:	88 e0       	ldi	r24, 0x08	; 8
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     dc2:	87 ea       	ldi	r24, 0xA7	; 167
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				

				LCDWriteStringXY(13,1,"1");
     dca:	8d e0       	ldi	r24, 0x0D	; 13
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     dd2:	87 ea       	ldi	r24, 0xA7	; 167
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(16,1,"1");
     dda:	80 e1       	ldi	r24, 0x10	; 16
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     de2:	87 ea       	ldi	r24, 0xA7	; 167
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(18,1,"1");
     dea:	82 e1       	ldi	r24, 0x12	; 18
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     df2:	87 ea       	ldi	r24, 0xA7	; 167
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	6d c0       	rjmp	.+218    	; 0xed2 <__stack+0x673>
				c=0;

			 }
			 else if(c==6)
     df8:	06 97       	sbiw	r24, 0x06	; 6
     dfa:	09 f0       	breq	.+2      	; 0xdfe <__stack+0x59f>
     dfc:	70 c0       	rjmp	.+224    	; 0xede <__stack+0x67f>
			 {
			 
				LCDClear();
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(0,0,"  I1 I2 O   I1 I2 O");
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e0e:	8f e2       	ldi	r24, 0x2F	; 47
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(3,1,"0");
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e1e:	83 e4       	ldi	r24, 0x43	; 67
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,1,"0");
     e26:	86 e0       	ldi	r24, 0x06	; 6
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e2e:	83 e4       	ldi	r24, 0x43	; 67
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,1,"0");
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e3e:	83 e4       	ldi	r24, 0x43	; 67
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,2,"0");
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e4e:	83 e4       	ldi	r24, 0x43	; 67
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,2,"1");
     e56:	86 e0       	ldi	r24, 0x06	; 6
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e5e:	87 ea       	ldi	r24, 0xA7	; 167
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,2,"1");
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	62 e0       	ldi	r22, 0x02	; 2
     e6a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e6e:	87 ea       	ldi	r24, 0xA7	; 167
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				
				LCDWriteStringXY(3,3,"1");
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	63 e0       	ldi	r22, 0x03	; 3
     e7a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e7e:	87 ea       	ldi	r24, 0xA7	; 167
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(6,3,"0");
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	63 e0       	ldi	r22, 0x03	; 3
     e8a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e8e:	83 e4       	ldi	r24, 0x43	; 67
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(8,3,"1");
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	63 e0       	ldi	r22, 0x03	; 3
     e9a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     e9e:	87 ea       	ldi	r24, 0xA7	; 167
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				

				LCDWriteStringXY(13,1,"1");
     ea6:	8d e0       	ldi	r24, 0x0D	; 13
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     eae:	87 ea       	ldi	r24, 0xA7	; 167
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(16,1,"1");
     eb6:	80 e1       	ldi	r24, 0x10	; 16
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ebe:	87 ea       	ldi	r24, 0xA7	; 167
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(18,1,"0");
     ec6:	82 e1       	ldi	r24, 0x12	; 18
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
     ece:	83 e4       	ldi	r24, 0x43	; 67
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				c=0;
     ed6:	10 92 33 02 	sts	0x0233, r1
     eda:	10 92 32 02 	sts	0x0232, r1

			 }}
			 while(!(PINA & 0x08));
     ede:	cb 9b       	sbis	0x19, 3	; 25
     ee0:	fe cf       	rjmp	.-4      	; 0xede <__stack+0x67f>
          }

          //second column
          PORTA = 0xDF;
     ee2:	8f ed       	ldi	r24, 0xDF	; 223
     ee4:	8b bb       	out	0x1b, r24	; 27
          if (!(PINA & 0x04))
     ee6:	ca 99       	sbic	0x19, 2	; 25
     ee8:	23 c0       	rjmp	.+70     	; 0xf30 <__stack+0x6d1>
          {
		  //(!(PINA & 0x01))
		  	LCDWriteString("8");
     eea:	8f e4       	ldi	r24, 0x4F	; 79
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 8;n++;
     ef2:	80 91 2e 02 	lds	r24, 0x022E
     ef6:	90 91 2f 02 	lds	r25, 0x022F
     efa:	9c 01       	movw	r18, r24
     efc:	e3 e0       	ldi	r30, 0x03	; 3
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	ea 95       	dec	r30
     f04:	e1 f7       	brne	.-8      	; 0xefe <__stack+0x69f>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	28 0f       	add	r18, r24
     f0c:	39 1f       	adc	r19, r25
     f0e:	28 5f       	subi	r18, 0xF8	; 248
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	30 93 2f 02 	sts	0x022F, r19
     f16:	20 93 2e 02 	sts	0x022E, r18
     f1a:	80 91 30 02 	lds	r24, 0x0230
     f1e:	90 91 31 02 	lds	r25, 0x0231
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	90 93 31 02 	sts	0x0231, r25
     f28:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x01));
     f2c:	c8 9b       	sbis	0x19, 0	; 25
     f2e:	fe cf       	rjmp	.-4      	; 0xf2c <__stack+0x6cd>
          }
          if (!(PINA & 0x02))
     f30:	c9 99       	sbic	0x19, 1	; 25
     f32:	23 c0       	rjmp	.+70     	; 0xf7a <__stack+0x71b>
          {
		  	LCDWriteString("5");
     f34:	81 e5       	ldi	r24, 0x51	; 81
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 5;n++;
     f3c:	80 91 2e 02 	lds	r24, 0x022E
     f40:	90 91 2f 02 	lds	r25, 0x022F
     f44:	9c 01       	movw	r18, r24
     f46:	63 e0       	ldi	r22, 0x03	; 3
     f48:	22 0f       	add	r18, r18
     f4a:	33 1f       	adc	r19, r19
     f4c:	6a 95       	dec	r22
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <__stack+0x6e9>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	28 0f       	add	r18, r24
     f56:	39 1f       	adc	r19, r25
     f58:	2b 5f       	subi	r18, 0xFB	; 251
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	30 93 2f 02 	sts	0x022F, r19
     f60:	20 93 2e 02 	sts	0x022E, r18
     f64:	80 91 30 02 	lds	r24, 0x0230
     f68:	90 91 31 02 	lds	r25, 0x0231
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	90 93 31 02 	sts	0x0231, r25
     f72:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x02));
     f76:	c9 9b       	sbis	0x19, 1	; 25
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <__stack+0x717>
          }

          if (!(PINA & 0x01))
     f7a:	c8 99       	sbic	0x19, 0	; 25
     f7c:	22 c0       	rjmp	.+68     	; 0xfc2 <__stack+0x763>
          {//(!(PINA & 0x04))
		  LCDWriteString("2");
     f7e:	83 e5       	ldi	r24, 0x53	; 83
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 2;n++;
     f86:	80 91 2e 02 	lds	r24, 0x022E
     f8a:	90 91 2f 02 	lds	r25, 0x022F
     f8e:	9c 01       	movw	r18, r24
     f90:	22 0f       	add	r18, r18
     f92:	33 1f       	adc	r19, r19
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	28 0f       	add	r18, r24
     f9a:	39 1f       	adc	r19, r25
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	22 0f       	add	r18, r18
     fa2:	33 1f       	adc	r19, r19
     fa4:	30 93 2f 02 	sts	0x022F, r19
     fa8:	20 93 2e 02 	sts	0x022E, r18
     fac:	80 91 30 02 	lds	r24, 0x0230
     fb0:	90 91 31 02 	lds	r25, 0x0231
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	90 93 31 02 	sts	0x0231, r25
     fba:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x04));
     fbe:	ca 9b       	sbis	0x19, 2	; 25
     fc0:	fe cf       	rjmp	.-4      	; 0xfbe <__stack+0x75f>
          }

          if (!(PINA & 0x08))
     fc2:	cb 99       	sbic	0x19, 3	; 25
     fc4:	21 c0       	rjmp	.+66     	; 0x1008 <__stack+0x7a9>
          {
		  LCDWriteString("0");
     fc6:	83 e4       	ldi	r24, 0x43	; 67
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 0;n++;
     fce:	80 91 2e 02 	lds	r24, 0x022E
     fd2:	90 91 2f 02 	lds	r25, 0x022F
     fd6:	9c 01       	movw	r18, r24
     fd8:	b3 e0       	ldi	r27, 0x03	; 3
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	ba 95       	dec	r27
     fe0:	e1 f7       	brne	.-8      	; 0xfda <__stack+0x77b>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	28 0f       	add	r18, r24
     fe8:	39 1f       	adc	r19, r25
     fea:	30 93 2f 02 	sts	0x022F, r19
     fee:	20 93 2e 02 	sts	0x022E, r18
     ff2:	80 91 30 02 	lds	r24, 0x0230
     ff6:	90 91 31 02 	lds	r25, 0x0231
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 31 02 	sts	0x0231, r25
    1000:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x08));
    1004:	cb 9b       	sbis	0x19, 3	; 25
    1006:	fe cf       	rjmp	.-4      	; 0x1004 <__stack+0x7a5>
          }

          //third column

          PORTA = 0xBF;
    1008:	8f eb       	ldi	r24, 0xBF	; 191
    100a:	8b bb       	out	0x1b, r24	; 27
          if (!(PINA & 0x04))
    100c:	ca 99       	sbic	0x19, 2	; 25
    100e:	24 c0       	rjmp	.+72     	; 0x1058 <__stack+0x7f9>
          {
		  //(!(PINA & 0x01))
		  LCDWriteString("9");
    1010:	85 e5       	ldi	r24, 0x55	; 85
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 9;n++;
    1018:	80 91 2e 02 	lds	r24, 0x022E
    101c:	90 91 2f 02 	lds	r25, 0x022F
    1020:	9c 01       	movw	r18, r24
    1022:	f3 e0       	ldi	r31, 0x03	; 3
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	fa 95       	dec	r31
    102a:	e1 f7       	brne	.-8      	; 0x1024 <__stack+0x7c5>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	28 0f       	add	r18, r24
    1032:	39 1f       	adc	r19, r25
    1034:	27 5f       	subi	r18, 0xF7	; 247
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	30 93 2f 02 	sts	0x022F, r19
    103c:	20 93 2e 02 	sts	0x022E, r18
    1040:	80 91 30 02 	lds	r24, 0x0230
    1044:	90 91 31 02 	lds	r25, 0x0231
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	90 93 31 02 	sts	0x0231, r25
    104e:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x01));
    1052:	c8 9b       	sbis	0x19, 0	; 25
    1054:	fe cf       	rjmp	.-4      	; 0x1052 <__stack+0x7f3>
    1056:	6e c0       	rjmp	.+220    	; 0x1134 <__stack+0x8d5>
          }
          else if (!(PINA & 0x02))
    1058:	c9 99       	sbic	0x19, 1	; 25
    105a:	24 c0       	rjmp	.+72     	; 0x10a4 <__stack+0x845>
          {
		  LCDWriteString("6");
    105c:	87 e5       	ldi	r24, 0x57	; 87
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 6;n++;
    1064:	80 91 2e 02 	lds	r24, 0x022E
    1068:	90 91 2f 02 	lds	r25, 0x022F
    106c:	9c 01       	movw	r18, r24
    106e:	73 e0       	ldi	r23, 0x03	; 3
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	7a 95       	dec	r23
    1076:	e1 f7       	brne	.-8      	; 0x1070 <__stack+0x811>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	28 0f       	add	r18, r24
    107e:	39 1f       	adc	r19, r25
    1080:	2a 5f       	subi	r18, 0xFA	; 250
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	30 93 2f 02 	sts	0x022F, r19
    1088:	20 93 2e 02 	sts	0x022E, r18
    108c:	80 91 30 02 	lds	r24, 0x0230
    1090:	90 91 31 02 	lds	r25, 0x0231
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	90 93 31 02 	sts	0x0231, r25
    109a:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x02));
    109e:	c9 9b       	sbis	0x19, 1	; 25
    10a0:	fe cf       	rjmp	.-4      	; 0x109e <__stack+0x83f>
    10a2:	48 c0       	rjmp	.+144    	; 0x1134 <__stack+0x8d5>
          }
          else if (!(PINA & 0x01))
    10a4:	c8 99       	sbic	0x19, 0	; 25
    10a6:	24 c0       	rjmp	.+72     	; 0x10f0 <__stack+0x891>
          {//(!(PINA & 0x04))
		  LCDWriteString("3");
    10a8:	89 e5       	ldi	r24, 0x59	; 89
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
             b = (b*10) + 3;n++;
    10b0:	80 91 2e 02 	lds	r24, 0x022E
    10b4:	90 91 2f 02 	lds	r25, 0x022F
    10b8:	9c 01       	movw	r18, r24
    10ba:	53 e0       	ldi	r21, 0x03	; 3
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	5a 95       	dec	r21
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <__stack+0x85d>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	28 0f       	add	r18, r24
    10ca:	39 1f       	adc	r19, r25
    10cc:	2d 5f       	subi	r18, 0xFD	; 253
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	30 93 2f 02 	sts	0x022F, r19
    10d4:	20 93 2e 02 	sts	0x022E, r18
    10d8:	80 91 30 02 	lds	r24, 0x0230
    10dc:	90 91 31 02 	lds	r25, 0x0231
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	90 93 31 02 	sts	0x0231, r25
    10e6:	80 93 30 02 	sts	0x0230, r24
             while(!(PINA & 0x04));
    10ea:	ca 9b       	sbis	0x19, 2	; 25
    10ec:	fe cf       	rjmp	.-4      	; 0x10ea <__stack+0x88b>
    10ee:	22 c0       	rjmp	.+68     	; 0x1134 <__stack+0x8d5>
          }
          else if (!(PINA & 0x08))
    10f0:	cb 99       	sbic	0x19, 3	; 25
    10f2:	20 c0       	rjmp	.+64     	; 0x1134 <__stack+0x8d5>
          {
				LCDClear();
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
				LCDWriteStringXY(1,0,"Automatic Mode");
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1104:	86 e8       	ldi	r24, 0x86	; 134
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(1,1,"Manual Mode");
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1114:	85 e9       	ldi	r24, 0x95	; 149
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				LCDWriteStringXY(0,0,">");
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1124:	81 ea       	ldi	r24, 0xA1	; 161
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				a=0;
    112c:	10 92 2d 02 	sts	0x022D, r1
    1130:	10 92 2c 02 	sts	0x022C, r1
	 
            
          }

          //fourth column
          PORTA = 0x7F;
    1134:	8f e7       	ldi	r24, 0x7F	; 127
    1136:	8b bb       	out	0x1b, r24	; 27
          if (!(PINA & 0x01))
    1138:	c8 99       	sbic	0x19, 0	; 25
    113a:	1b c0       	rjmp	.+54     	; 0x1172 <__stack+0x913>
          {		
		  	 if(a==1)
    113c:	80 91 2c 02 	lds	r24, 0x022C
    1140:	90 91 2d 02 	lds	r25, 0x022D
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	b1 f5       	brne	.+108    	; 0x11b4 <__stack+0x955>
			 {
				 LCDWriteStringXY(0,0,">");
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1150:	81 ea       	ldi	r24, 0xA1	; 161
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				 LCDWriteStringXY(0,1," ");
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	61 e0       	ldi	r22, 0x01	; 1
    115c:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1160:	8b e5       	ldi	r24, 0x5B	; 91
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
				 a=0;
    1168:	10 92 2d 02 	sts	0x022D, r1
    116c:	10 92 2c 02 	sts	0x022C, r1
    1170:	21 c0       	rjmp	.+66     	; 0x11b4 <__stack+0x955>
		     }
             
			 
         }
        else if (!(PINA & 0x02))
    1172:	c9 99       	sbic	0x19, 1	; 25
    1174:	1d c0       	rjmp	.+58     	; 0x11b0 <__stack+0x951>
          {
             
			 if(a==0)
    1176:	80 91 2c 02 	lds	r24, 0x022C
    117a:	90 91 2d 02 	lds	r25, 0x022D
    117e:	89 2b       	or	r24, r25
    1180:	c9 f4       	brne	.+50     	; 0x11b4 <__stack+0x955>
			 {LCDWriteStringXY(0,1,">");
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    118a:	81 ea       	ldi	r24, 0xA1	; 161
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			 LCDWriteStringXY(0,0," ");
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    119a:	8b e5       	ldi	r24, 0x5B	; 91
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			 a=1;}
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	90 93 2d 02 	sts	0x022D, r25
    11aa:	80 93 2c 02 	sts	0x022C, r24
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <__stack+0x955>
			 
          }
         else if (!(PINA & 0x04))
    11b0:	ca 99       	sbic	0x19, 2	; 25
          {
             
         }
        else if (!(PINA & 0x08))
    11b2:	89 b3       	in	r24, 0x19	; 25
          {
             
         }
		if(n>3)
    11b4:	80 91 30 02 	lds	r24, 0x0230
    11b8:	90 91 31 02 	lds	r25, 0x0231
    11bc:	04 97       	sbiw	r24, 0x04	; 4
    11be:	0c f4       	brge	.+2      	; 0x11c2 <__stack+0x963>
    11c0:	78 ca       	rjmp	.-2832   	; 0x6b2 <main+0x94>
		{
			n=0;
    11c2:	10 92 31 02 	sts	0x0231, r1
    11c6:	10 92 30 02 	sts	0x0230, r1
			LCDClear();
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
			LCDWriteStringXY(3,2,"Checking IC");
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    11da:	89 ea       	ldi	r24, 0xA9	; 169
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
			switch(b)
    11e2:	80 91 2e 02 	lds	r24, 0x022E
    11e6:	90 91 2f 02 	lds	r25, 0x022F
    11ea:	2c e1       	ldi	r18, 0x1C	; 28
    11ec:	8c 3e       	cpi	r24, 0xEC	; 236
    11ee:	92 07       	cpc	r25, r18
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__stack+0x995>
    11f2:	bf c0       	rjmp	.+382    	; 0x1372 <__stack+0xb13>
    11f4:	2c e1       	ldi	r18, 0x1C	; 28
    11f6:	8d 3e       	cpi	r24, 0xED	; 237
    11f8:	92 07       	cpc	r25, r18
    11fa:	4c f4       	brge	.+18     	; 0x120e <__stack+0x9af>
    11fc:	2c e1       	ldi	r18, 0x1C	; 28
    11fe:	88 3e       	cpi	r24, 0xE8	; 232
    1200:	92 07       	cpc	r25, r18
    1202:	a1 f0       	breq	.+40     	; 0x122c <__stack+0x9cd>
    1204:	8a 5e       	subi	r24, 0xEA	; 234
    1206:	9c 41       	sbci	r25, 0x1C	; 28
    1208:	09 f0       	breq	.+2      	; 0x120c <__stack+0x9ad>
    120a:	53 ca       	rjmp	.-2906   	; 0x6b2 <main+0x94>
    120c:	62 c0       	rjmp	.+196    	; 0x12d2 <__stack+0xa73>
    120e:	2d e1       	ldi	r18, 0x1D	; 29
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	92 07       	cpc	r25, r18
    1214:	09 f4       	brne	.+2      	; 0x1218 <__stack+0x9b9>
    1216:	41 c1       	rjmp	.+642    	; 0x149a <__stack+0xc3b>
    1218:	2d e1       	ldi	r18, 0x1D	; 29
    121a:	8e 33       	cpi	r24, 0x3E	; 62
    121c:	92 07       	cpc	r25, r18
    121e:	09 f4       	brne	.+2      	; 0x1222 <__stack+0x9c3>
    1220:	8c c1       	rjmp	.+792    	; 0x153a <__stack+0xcdb>
    1222:	80 5f       	subi	r24, 0xF0	; 240
    1224:	9c 41       	sbci	r25, 0x1C	; 28
    1226:	09 f0       	breq	.+2      	; 0x122a <__stack+0x9cb>
    1228:	44 ca       	rjmp	.-2936   	; 0x6b2 <main+0x94>
    122a:	e7 c0       	rjmp	.+462    	; 0x13fa <__stack+0xb9b>
             {
                case 7400: 
				b=0;
    122c:	10 92 2f 02 	sts	0x022F, r1
    1230:	10 92 2e 02 	sts	0x022E, r1
					nandcheck(); 
    1234:	0e 94 a4 01 	call	0x348	; 0x348 <nandcheck>
					if(h==1 && i==1 && j==1 && k==0)
    1238:	80 91 24 02 	lds	r24, 0x0224
    123c:	90 91 25 02 	lds	r25, 0x0225
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	e1 f5       	brne	.+120    	; 0x12bc <__stack+0xa5d>
    1244:	80 91 26 02 	lds	r24, 0x0226
    1248:	90 91 27 02 	lds	r25, 0x0227
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	b1 f5       	brne	.+108    	; 0x12bc <__stack+0xa5d>
    1250:	c0 91 28 02 	lds	r28, 0x0228
    1254:	d0 91 29 02 	lds	r29, 0x0229
    1258:	c1 30       	cpi	r28, 0x01	; 1
    125a:	d1 05       	cpc	r29, r1
    125c:	79 f5       	brne	.+94     	; 0x12bc <__stack+0xa5d>
    125e:	80 91 2a 02 	lds	r24, 0x022A
    1262:	90 91 2b 02 	lds	r25, 0x022B
    1266:	89 2b       	or	r24, r25
    1268:	49 f5       	brne	.+82     	; 0x12bc <__stack+0xa5d>
					{
						LCDClear();
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7400");
    1272:	84 e0       	ldi	r24, 0x04	; 4
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    127a:	8d e5       	ldi	r24, 0x5D	; 93
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC  is good");
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    128a:	87 e6       	ldi	r24, 0x67	; 103
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	62 e0       	ldi	r22, 0x02	; 2
    1296:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    129a:	83 e7       	ldi	r24, 0x73	; 115
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	63 e0       	ldi	r22, 0x03	; 3
    12a6:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    12aa:	85 e8       	ldi	r24, 0x85	; 133
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=1;
    12b2:	d0 93 33 02 	sts	0x0233, r29
    12b6:	c0 93 32 02 	sts	0x0232, r28
    12ba:	fb c9       	rjmp	.-3082   	; 0x6b2 <main+0x94>

					}
					else
					{	
						LCDClear();
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7400");
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    12cc:	8d e5       	ldi	r24, 0x5D	; 93
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	88 c1       	rjmp	.+784    	; 0x15e2 <__stack+0xd83>
						LCDWriteStringXY(0,1,"IC is not good");
					} 
				break;
                case 7402: 
				b=0;
    12d2:	10 92 2f 02 	sts	0x022F, r1
    12d6:	10 92 2e 02 	sts	0x022E, r1
					norcheck(); 
    12da:	0e 94 13 02 	call	0x426	; 0x426 <norcheck>
					if(h==1 && i==0 && j==0 && k==0)
    12de:	80 91 24 02 	lds	r24, 0x0224
    12e2:	90 91 25 02 	lds	r25, 0x0225
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	c9 f5       	brne	.+114    	; 0x135c <__stack+0xafd>
    12ea:	80 91 26 02 	lds	r24, 0x0226
    12ee:	90 91 27 02 	lds	r25, 0x0227
    12f2:	89 2b       	or	r24, r25
    12f4:	99 f5       	brne	.+102    	; 0x135c <__stack+0xafd>
    12f6:	80 91 28 02 	lds	r24, 0x0228
    12fa:	90 91 29 02 	lds	r25, 0x0229
    12fe:	89 2b       	or	r24, r25
    1300:	69 f5       	brne	.+90     	; 0x135c <__stack+0xafd>
    1302:	80 91 2a 02 	lds	r24, 0x022A
    1306:	90 91 2b 02 	lds	r25, 0x022B
    130a:	89 2b       	or	r24, r25
    130c:	39 f5       	brne	.+78     	; 0x135c <__stack+0xafd>
					{
						LCDClear();
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7402");
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    131e:	86 ea       	ldi	r24, 0xA6	; 166
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC  is good");
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    132e:	87 e6       	ldi	r24, 0x67	; 103
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	62 e0       	ldi	r22, 0x02	; 2
    133a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    133e:	83 e7       	ldi	r24, 0x73	; 115
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	63 e0       	ldi	r22, 0x03	; 3
    134a:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    134e:	85 e8       	ldi	r24, 0x85	; 133
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=2;
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	34 c1       	rjmp	.+616    	; 0x15c4 <__stack+0xd65>
					}
					else
					{	
						LCDClear();
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7402");
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    136c:	86 ea       	ldi	r24, 0xA6	; 166
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	38 c1       	rjmp	.+624    	; 0x15e2 <__stack+0xd83>
						LCDWriteStringXY(0,1,"IC is not good");
						
					} 
				break;
                case 7404: 
				b=0;
    1372:	10 92 2f 02 	sts	0x022F, r1
    1376:	10 92 2e 02 	sts	0x022E, r1
					notcheck(); 
    137a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <notcheck>
					if(h==1 && i==0 )
    137e:	80 91 24 02 	lds	r24, 0x0224
    1382:	90 91 25 02 	lds	r25, 0x0225
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	69 f5       	brne	.+90     	; 0x13e4 <__stack+0xb85>
    138a:	80 91 26 02 	lds	r24, 0x0226
    138e:	90 91 27 02 	lds	r25, 0x0227
    1392:	89 2b       	or	r24, r25
    1394:	39 f5       	brne	.+78     	; 0x13e4 <__stack+0xb85>
					{
						LCDClear();
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7404");
    139e:	84 e0       	ldi	r24, 0x04	; 4
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    13a6:	80 eb       	ldi	r24, 0xB0	; 176
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC  is good");
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    13b6:	87 e6       	ldi	r24, 0x67	; 103
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    13c6:	83 e7       	ldi	r24, 0x73	; 115
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    13d6:	85 e8       	ldi	r24, 0x85	; 133
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=3;
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	f0 c0       	rjmp	.+480    	; 0x15c4 <__stack+0xd65>
					}
					else
					{	
						LCDClear();
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7404");
    13ec:	84 e0       	ldi	r24, 0x04	; 4
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    13f4:	80 eb       	ldi	r24, 0xB0	; 176
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	f4 c0       	rjmp	.+488    	; 0x15e2 <__stack+0xd83>
						LCDWriteStringXY(0,1,"IC is not good");

					} 
				break;
                case 7408: 
					b=0;
    13fa:	10 92 2f 02 	sts	0x022F, r1
    13fe:	10 92 2e 02 	sts	0x022E, r1
					andcheck(); 
    1402:	0e 94 ca 00 	call	0x194	; 0x194 <andcheck>
					if(h==0 && i==0 && j==0 && k==1)
    1406:	80 91 24 02 	lds	r24, 0x0224
    140a:	90 91 25 02 	lds	r25, 0x0225
    140e:	89 2b       	or	r24, r25
    1410:	c9 f5       	brne	.+114    	; 0x1484 <__stack+0xc25>
    1412:	80 91 26 02 	lds	r24, 0x0226
    1416:	90 91 27 02 	lds	r25, 0x0227
    141a:	89 2b       	or	r24, r25
    141c:	99 f5       	brne	.+102    	; 0x1484 <__stack+0xc25>
    141e:	80 91 28 02 	lds	r24, 0x0228
    1422:	90 91 29 02 	lds	r25, 0x0229
    1426:	89 2b       	or	r24, r25
    1428:	69 f5       	brne	.+90     	; 0x1484 <__stack+0xc25>
    142a:	80 91 2a 02 	lds	r24, 0x022A
    142e:	90 91 2b 02 	lds	r25, 0x022B
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	39 f5       	brne	.+78     	; 0x1484 <__stack+0xc25>
					{
						LCDClear();
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7408");
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1446:	8a eb       	ldi	r24, 0xBA	; 186
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC  is good");
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1456:	87 e6       	ldi	r24, 0x67	; 103
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1466:	83 e7       	ldi	r24, 0x73	; 115
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	63 e0       	ldi	r22, 0x03	; 3
    1472:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1476:	85 e8       	ldi	r24, 0x85	; 133
    1478:	91 e0       	ldi	r25, 0x01	; 1
    147a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=4;
    147e:	84 e0       	ldi	r24, 0x04	; 4
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 c0       	rjmp	.+320    	; 0x15c4 <__stack+0xd65>
					}
					else
					{	
						LCDClear();
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7408");
    148c:	84 e0       	ldi	r24, 0x04	; 4
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1494:	8a eb       	ldi	r24, 0xBA	; 186
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	a4 c0       	rjmp	.+328    	; 0x15e2 <__stack+0xd83>
						LCDWriteStringXY(0,1,"IC is not good");
					}
					break;
                case 7432: 
					 
					b=0;
    149a:	10 92 2f 02 	sts	0x022F, r1
    149e:	10 92 2e 02 	sts	0x022E, r1
					orcheck(); 
    14a2:	0e 94 35 01 	call	0x26a	; 0x26a <orcheck>
					if(h==0 && i==1 && j==1 && k==1)
    14a6:	80 91 24 02 	lds	r24, 0x0224
    14aa:	90 91 25 02 	lds	r25, 0x0225
    14ae:	89 2b       	or	r24, r25
    14b0:	c9 f5       	brne	.+114    	; 0x1524 <__stack+0xcc5>
    14b2:	80 91 26 02 	lds	r24, 0x0226
    14b6:	90 91 27 02 	lds	r25, 0x0227
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	99 f5       	brne	.+102    	; 0x1524 <__stack+0xcc5>
    14be:	80 91 28 02 	lds	r24, 0x0228
    14c2:	90 91 29 02 	lds	r25, 0x0229
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	69 f5       	brne	.+90     	; 0x1524 <__stack+0xcc5>
    14ca:	80 91 2a 02 	lds	r24, 0x022A
    14ce:	90 91 2b 02 	lds	r25, 0x022B
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	39 f5       	brne	.+78     	; 0x1524 <__stack+0xcc5>
					{
						LCDClear();
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7432");
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    14e6:	84 ec       	ldi	r24, 0xC4	; 196
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC is good");
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    14f6:	8e ec       	ldi	r24, 0xCE	; 206
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1506:	83 e7       	ldi	r24, 0x73	; 115
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	63 e0       	ldi	r22, 0x03	; 3
    1512:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1516:	85 e8       	ldi	r24, 0x85	; 133
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=5;
    151e:	85 e0       	ldi	r24, 0x05	; 5
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	50 c0       	rjmp	.+160    	; 0x15c4 <__stack+0xd65>
					}
					else
					{	
						LCDClear();
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7432");
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1534:	84 ec       	ldi	r24, 0xC4	; 196
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	54 c0       	rjmp	.+168    	; 0x15e2 <__stack+0xd83>
						LCDWriteStringXY(0,1,"IC is not good");
					}
					break;break;
                case 7486: 
				b=0;
    153a:	10 92 2f 02 	sts	0x022F, r1
    153e:	10 92 2e 02 	sts	0x022E, r1
					xorcheck(); 
    1542:	0e 94 7e 02 	call	0x4fc	; 0x4fc <xorcheck>
					if(h==0 && i==1 && j==1 && k==0)
    1546:	80 91 24 02 	lds	r24, 0x0224
    154a:	90 91 25 02 	lds	r25, 0x0225
    154e:	89 2b       	or	r24, r25
    1550:	09 f0       	breq	.+2      	; 0x1554 <__stack+0xcf5>
    1552:	3d c0       	rjmp	.+122    	; 0x15ce <__stack+0xd6f>
    1554:	80 91 26 02 	lds	r24, 0x0226
    1558:	90 91 27 02 	lds	r25, 0x0227
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	b9 f5       	brne	.+110    	; 0x15ce <__stack+0xd6f>
    1560:	80 91 28 02 	lds	r24, 0x0228
    1564:	90 91 29 02 	lds	r25, 0x0229
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	89 f5       	brne	.+98     	; 0x15ce <__stack+0xd6f>
    156c:	80 91 2a 02 	lds	r24, 0x022A
    1570:	90 91 2b 02 	lds	r25, 0x022B
    1574:	89 2b       	or	r24, r25
    1576:	59 f5       	brne	.+86     	; 0x15ce <__stack+0xd6f>
					{
						LCDClear();
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7486");
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1588:	89 ed       	ldi	r24, 0xD9	; 217
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC  is good");
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    1598:	87 e6       	ldi	r24, 0x67	; 103
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,2,"View Truth table?");
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    15a8:	83 e7       	ldi	r24, 0x73	; 115
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,3,"  Yes          No");
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	63 e0       	ldi	r22, 0x03	; 3
    15b4:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    15b8:	85 e8       	ldi	r24, 0x85	; 133
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						c=6;
    15c0:	86 e0       	ldi	r24, 0x06	; 6
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	90 93 33 02 	sts	0x0233, r25
    15c8:	80 93 32 02 	sts	0x0232, r24
    15cc:	72 c8       	rjmp	.-3868   	; 0x6b2 <main+0x94>
					}
					else
					{	
						LCDClear();
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
						LCDWriteStringXY(4,0,"IC:  7486");
    15d6:	84 e0       	ldi	r24, 0x04	; 4
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    15de:	89 ed       	ldi	r24, 0xD9	; 217
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
						LCDWriteStringXY(0,1,"IC is not good");
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	61 e0       	ldi	r22, 0x01	; 1
    15ea:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCDGotoXY>
    15ee:	87 e9       	ldi	r24, 0x97	; 151
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCDWriteString>
    15f6:	5d c8       	rjmp	.-3910   	; 0x6b2 <main+0x94>

000015f8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    15f8:	84 b3       	in	r24, 0x14	; 20
    15fa:	87 78       	andi	r24, 0x87	; 135
    15fc:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
    15fe:	a9 9a       	sbi	0x15, 1	; 21
	CLEAR_RS();		//Read status
    1600:	a8 98       	cbi	0x15, 0	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	8a 95       	dec	r24
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	aa 9a       	sbi	0x15, 2	; 21
    160c:	82 2f       	mov	r24, r18
    160e:	8a 95       	dec	r24
    1610:	f1 f7       	brne	.-4      	; 0x160e <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    1612:	83 b3       	in	r24, 0x13	; 19
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
		status=status<<4;
    161a:	82 95       	swap	r24
    161c:	80 7f       	andi	r24, 0xF0	; 240
    161e:	92 2f       	mov	r25, r18
    1620:	9a 95       	dec	r25
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCDBusyLoop+0x28>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    1624:	aa 98       	cbi	0x15, 2	; 21
    1626:	92 2f       	mov	r25, r18
    1628:	9a 95       	dec	r25
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCDBusyLoop+0x30>
		_delay_us(1);	//tEL

		SET_E();
    162c:	aa 9a       	sbi	0x15, 2	; 21
    162e:	92 2f       	mov	r25, r18
    1630:	9a 95       	dec	r25
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCDBusyLoop+0x38>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    1634:	93 b3       	in	r25, 0x13	; 19
    1636:	92 2f       	mov	r25, r18
    1638:	9a 95       	dec	r25
    163a:	f1 f7       	brne	.-4      	; 0x1638 <LCDBusyLoop+0x40>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
    163c:	aa 98       	cbi	0x15, 2	; 21
    163e:	92 2f       	mov	r25, r18
    1640:	9a 95       	dec	r25
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCDBusyLoop+0x48>
		_delay_us(1);	//tEL
	}while(busy);
    1644:	87 fd       	sbrc	r24, 7
    1646:	e1 cf       	rjmp	.-62     	; 0x160a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
    1648:	a9 98       	cbi	0x15, 1	; 21
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    164a:	84 b3       	in	r24, 0x14	; 20
    164c:	88 67       	ori	r24, 0x78	; 120
    164e:	84 bb       	out	0x14, r24	; 20

}
    1650:	08 95       	ret

00001652 <LCDByte>:
#ifdef LCD_TYPE_202
	#define LCD_TYPE_204
#endif

void LCDByte(uint8_t c,uint8_t isdata)
{
    1652:	38 2f       	mov	r19, r24
	uint8_t temp;

	hn=c>>4;
	ln=(c & 0x0F);

	if(isdata==0)
    1654:	66 23       	and	r22, r22
    1656:	11 f4       	brne	.+4      	; 0x165c <LCDByte+0xa>
		CLEAR_RS();
    1658:	a8 98       	cbi	0x15, 0	; 21
    165a:	01 c0       	rjmp	.+2      	; 0x165e <LCDByte+0xc>
	else
		SET_RS();
    165c:	a8 9a       	sbi	0x15, 0	; 21
    165e:	21 e0       	ldi	r18, 0x01	; 1
    1660:	82 2f       	mov	r24, r18
    1662:	8a 95       	dec	r24
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCDByte+0x10>

	_delay_us(0.500);		//tAS

	SET_E();
    1666:	aa 9a       	sbi	0x15, 2	; 21

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
    1668:	95 b3       	in	r25, 0x15	; 21
    166a:	83 2f       	mov	r24, r19
    166c:	82 95       	swap	r24
    166e:	8f 70       	andi	r24, 0x0F	; 15
    1670:	88 0f       	add	r24, r24
    1672:	88 0f       	add	r24, r24
    1674:	88 0f       	add	r24, r24
    1676:	97 78       	andi	r25, 0x87	; 135
    1678:	89 2b       	or	r24, r25
	LCD_DATA_PORT=temp;
    167a:	85 bb       	out	0x15, r24	; 21
    167c:	82 2f       	mov	r24, r18
    167e:	8a 95       	dec	r24
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCDByte+0x2c>

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
    1682:	aa 98       	cbi	0x15, 2	; 21
    1684:	82 2f       	mov	r24, r18
    1686:	8a 95       	dec	r24
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCDByte+0x34>

	_delay_us(1);

	//Send the lower nibble
	SET_E();
    168a:	aa 9a       	sbi	0x15, 2	; 21

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
    168c:	85 b3       	in	r24, 0x15	; 21
    168e:	3f 70       	andi	r19, 0x0F	; 15
    1690:	33 0f       	add	r19, r19
    1692:	33 0f       	add	r19, r19
    1694:	33 0f       	add	r19, r19
    1696:	87 78       	andi	r24, 0x87	; 135
    1698:	83 2b       	or	r24, r19

	LCD_DATA_PORT=temp;
    169a:	85 bb       	out	0x15, r24	; 21
    169c:	82 2f       	mov	r24, r18
    169e:	8a 95       	dec	r24
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LCDByte+0x4c>

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
    16a2:	aa 98       	cbi	0x15, 2	; 21
    16a4:	2a 95       	dec	r18
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCDByte+0x52>

	_delay_us(1);			//tEL

	LCDBusyLoop();
    16a8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCDBusyLoop>
}
    16ac:	08 95       	ret

000016ae <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16b6:	88 ea       	ldi	r24, 0xA8	; 168
    16b8:	91 e6       	ldi	r25, 0x61	; 97
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    16be:	85 b3       	in	r24, 0x15	; 21
    16c0:	87 78       	andi	r24, 0x87	; 135
    16c2:	85 bb       	out	0x15, r24	; 21
	
	CLEAR_E();
    16c4:	aa 98       	cbi	0x15, 2	; 21
	CLEAR_RW();
    16c6:	a9 98       	cbi	0x15, 1	; 21
	CLEAR_RS();
    16c8:	a8 98       	cbi	0x15, 0	; 21
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
    16ca:	84 b3       	in	r24, 0x14	; 20
    16cc:	88 67       	ori	r24, 0x78	; 120
    16ce:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
    16d0:	a2 9a       	sbi	0x14, 2	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
    16d2:	a0 9a       	sbi	0x14, 0	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
    16d4:	a1 9a       	sbi	0x14, 1	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	98 2f       	mov	r25, r24
    16da:	9a 95       	dec	r25
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCDInit+0x2c>
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    16de:	aa 9a       	sbi	0x15, 2	; 21
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    16e0:	ac 9a       	sbi	0x15, 4	; 21
    16e2:	98 2f       	mov	r25, r24
    16e4:	9a 95       	dec	r25
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
    16e8:	aa 98       	cbi	0x15, 2	; 21
    16ea:	8a 95       	dec	r24
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <LCDInit+0x3c>
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    16ee:	84 e6       	ldi	r24, 0x64	; 100
    16f0:	8a 95       	dec	r24
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCDInit+0x42>
    16f4:	88 e2       	ldi	r24, 0x28	; 40
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
    16fc:	81 2f       	mov	r24, r17
    16fe:	88 60       	ori	r24, 0x08	; 8
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
    1706:	81 2f       	mov	r24, r17
    1708:	8c 60       	ori	r24, 0x0C	; 12
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    1710:	80 e4       	ldi	r24, 0x40	; 64
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
    1718:	c3 ee       	ldi	r28, 0xE3	; 227
    171a:	d1 e0       	ldi	r29, 0x01	; 1

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
    171c:	89 91       	ld	r24, Y+
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	c3 32       	cpi	r28, 0x23	; 35
    1728:	d8 07       	cpc	r29, r24
    172a:	c1 f7       	brne	.-16     	; 0x171c <LCDInit+0x6e>
		LCDData(__cgram[__i]);
	
	LCDClear();
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>

}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	08 95       	ret

0000173c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	10 c0       	rjmp	.+32     	; 0x1764 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
    1744:	85 32       	cpi	r24, 0x25	; 37
    1746:	51 f4       	brne	.+20     	; 0x175c <LCDWriteString+0x20>
	{
		msg++;
    1748:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
    174a:	88 81       	ld	r24, Y
    174c:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
    174e:	88 30       	cpi	r24, 0x08	; 8
    1750:	28 f0       	brcs	.+10     	; 0x175c <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
    1752:	85 e2       	ldi	r24, 0x25	; 37
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
			LCDData(*msg);
    175a:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	}
	msg++;
    1762:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    1764:	88 81       	ld	r24, Y
    1766:	88 23       	and	r24, r24
    1768:	69 f7       	brne	.-38     	; 0x1744 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
    1778:	fc 01       	movw	r30, r24
    177a:	84 91       	lpm	r24, Z+
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <LCDWriteFString+0x36>
 while(ch!='\0')
 {
 	//Custom Char Support
	if(ch=='%')
    177e:	85 32       	cpi	r24, 0x25	; 37
    1780:	61 f4       	brne	.+24     	; 0x179a <LCDWriteFString+0x2a>
	{
		msg++;
    1782:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
    1784:	fe 01       	movw	r30, r28
    1786:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
    1788:	81 2f       	mov	r24, r17
    178a:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	28 f0       	brcs	.+10     	; 0x179a <LCDWriteFString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
    1790:	85 e2       	ldi	r24, 0x25	; 37
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
			LCDData(ch);
    1798:	81 2f       	mov	r24, r17
		}
	}
	else
	{
		LCDData(ch);
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	}
	msg++;
    17a0:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
    17a2:	fe 01       	movw	r30, r28
    17a4:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
    17a6:	88 23       	and	r24, r24
    17a8:	51 f7       	brne	.-44     	; 0x177e <LCDWriteFString+0xe>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret

000017b2 <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <LCDWriteInt+0xe>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <LCDWriteInt+0x10>
    17c2:	0f 92       	push	r0
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	8c 01       	movw	r16, r24
    17ca:	f6 2e       	mov	r15, r22

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
    17cc:	97 ff       	sbrs	r25, 7
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <LCDWriteInt+0x2e>
	{
		LCDData('-');   //Write Negative sign
    17d0:	8d e2       	ldi	r24, 0x2D	; 45
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
		val=val*-1;     //convert to positive
    17d8:	10 95       	com	r17
    17da:	01 95       	neg	r16
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	04 c0       	rjmp	.+8      	; 0x17e8 <LCDWriteInt+0x36>
	}
	else
	{
		LCDData(' ');
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    17e8:	fe 01       	movw	r30, r28
    17ea:	31 96       	adiw	r30, 0x01	; 1
    17ec:	85 e0       	ldi	r24, 0x05	; 5
    17ee:	df 01       	movw	r26, r30
    17f0:	1d 92       	st	X+, r1
    17f2:	8a 95       	dec	r24
    17f4:	e9 f7       	brne	.-6      	; 0x17f0 <LCDWriteInt+0x3e>
    17f6:	fe 01       	movw	r30, r28
    17f8:	35 96       	adiw	r30, 0x05	; 5
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <LCDWriteInt+0x64>
		LCDData(' ');
	}
	
	while(val)
	{
		str[i]=val%10;
    17fc:	c8 01       	movw	r24, r16
    17fe:	6a e0       	ldi	r22, 0x0A	; 10
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__divmodhi4>
    1806:	80 83       	st	Z, r24
		val=val/10;
    1808:	c8 01       	movw	r24, r16
    180a:	6a e0       	ldi	r22, 0x0A	; 10
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__divmodhi4>
    1812:	8b 01       	movw	r16, r22
    1814:	31 97       	sbiw	r30, 0x01	; 1
	else
	{
		LCDData(' ');
	}
	
	while(val)
    1816:	01 15       	cp	r16, r1
    1818:	11 05       	cpc	r17, r1
    181a:	81 f7       	brne	.-32     	; 0x17fc <LCDWriteInt+0x4a>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
    181c:	bf ef       	ldi	r27, 0xFF	; 255
    181e:	fb 16       	cp	r15, r27
    1820:	81 f4       	brne	.+32     	; 0x1842 <LCDWriteInt+0x90>
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
    1826:	ae 01       	movw	r20, r28
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <LCDWriteInt+0x80>
    182e:	2f 5f       	subi	r18, 0xFF	; 255
    1830:	3f 4f       	sbci	r19, 0xFF	; 255
    1832:	fa 01       	movw	r30, r20
    1834:	e2 0f       	add	r30, r18
    1836:	f3 1f       	adc	r31, r19
    1838:	80 81       	ld	r24, Z
    183a:	88 23       	and	r24, r24
    183c:	c1 f3       	breq	.-16     	; 0x182e <LCDWriteInt+0x7c>
    183e:	89 01       	movw	r16, r18
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <LCDWriteInt+0xa0>
	else
		j=5-field_length;
    1842:	8f 2d       	mov	r24, r15
    1844:	99 27       	eor	r25, r25
    1846:	87 fd       	sbrc	r24, 7
    1848:	90 95       	com	r25
    184a:	05 e0       	ldi	r16, 0x05	; 5
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	08 1b       	sub	r16, r24
    1850:	19 0b       	sbc	r17, r25
    1852:	7e 01       	movw	r14, r28
    1854:	08 94       	sec
    1856:	e1 1c       	adc	r14, r1
    1858:	f1 1c       	adc	r15, r1
    185a:	e0 0e       	add	r14, r16
    185c:	f1 1e       	adc	r15, r17
    185e:	09 c0       	rjmp	.+18     	; 0x1872 <LCDWriteInt+0xc0>

	for(i=j;i<5;i++)
	{
		LCDData('0'+str[i]);
    1860:	f7 01       	movw	r30, r14
    1862:	81 91       	ld	r24, Z+
    1864:	7f 01       	movw	r14, r30
    1866:	80 5d       	subi	r24, 0xD0	; 208
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
    186e:	0f 5f       	subi	r16, 0xFF	; 255
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	05 30       	cpi	r16, 0x05	; 5
    1874:	11 05       	cpc	r17, r1
    1876:	a4 f3       	brlt	.-24     	; 0x1860 <LCDWriteInt+0xae>
	{
		LCDData('0'+str[i]);
	}
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
    1890:	84 31       	cpi	r24, 0x14	; 20
    1892:	78 f4       	brcc	.+30     	; 0x18b2 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
    1894:	62 30       	cpi	r22, 0x02	; 2
    1896:	31 f0       	breq	.+12     	; 0x18a4 <LCDGotoXY+0x14>
    1898:	63 30       	cpi	r22, 0x03	; 3
    189a:	31 f0       	breq	.+12     	; 0x18a8 <LCDGotoXY+0x18>
    189c:	61 30       	cpi	r22, 0x01	; 1
    189e:	29 f4       	brne	.+10     	; 0x18aa <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
    18a4:	8c 5e       	subi	r24, 0xEC	; 236
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
    18a8:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
    18aa:	80 68       	ori	r24, 0x80	; 128
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	0e 94 29 0b 	call	0x1652	; 0x1652 <LCDByte>
    18b2:	08 95       	ret

000018b4 <vfprintf>:
    18b4:	a1 e1       	ldi	r26, 0x11	; 17
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e0 e6       	ldi	r30, 0x60	; 96
    18ba:	fc e0       	ldi	r31, 0x0C	; 12
    18bc:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__prologue_saves__>
    18c0:	3c 01       	movw	r6, r24
    18c2:	7f 87       	std	Y+15, r23	; 0x0f
    18c4:	6e 87       	std	Y+14, r22	; 0x0e
    18c6:	6a 01       	movw	r12, r20
    18c8:	fc 01       	movw	r30, r24
    18ca:	17 82       	std	Z+7, r1	; 0x07
    18cc:	16 82       	std	Z+6, r1	; 0x06
    18ce:	83 81       	ldd	r24, Z+3	; 0x03
    18d0:	81 fd       	sbrc	r24, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x26>
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	7f ef       	ldi	r23, 0xFF	; 255
    18d8:	6f c3       	rjmp	.+1758   	; 0x1fb8 <vfprintf+0x704>
    18da:	9e 01       	movw	r18, r28
    18dc:	2f 5f       	subi	r18, 0xFF	; 255
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	39 8b       	std	Y+17, r19	; 0x11
    18e2:	28 8b       	std	Y+16, r18	; 0x10
    18e4:	f3 01       	movw	r30, r6
    18e6:	23 81       	ldd	r18, Z+3	; 0x03
    18e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    18ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    18ec:	23 fd       	sbrc	r18, 3
    18ee:	85 91       	lpm	r24, Z+
    18f0:	23 ff       	sbrs	r18, 3
    18f2:	81 91       	ld	r24, Z+
    18f4:	ff 87       	std	Y+15, r31	; 0x0f
    18f6:	ee 87       	std	Y+14, r30	; 0x0e
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <vfprintf+0x4a>
    18fc:	5a c3       	rjmp	.+1716   	; 0x1fb2 <vfprintf+0x6fe>
    18fe:	85 32       	cpi	r24, 0x25	; 37
    1900:	51 f4       	brne	.+20     	; 0x1916 <vfprintf+0x62>
    1902:	ee 85       	ldd	r30, Y+14	; 0x0e
    1904:	ff 85       	ldd	r31, Y+15	; 0x0f
    1906:	23 fd       	sbrc	r18, 3
    1908:	85 91       	lpm	r24, Z+
    190a:	23 ff       	sbrs	r18, 3
    190c:	81 91       	ld	r24, Z+
    190e:	ff 87       	std	Y+15, r31	; 0x0f
    1910:	ee 87       	std	Y+14, r30	; 0x0e
    1912:	85 32       	cpi	r24, 0x25	; 37
    1914:	29 f4       	brne	.+10     	; 0x1920 <vfprintf+0x6c>
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	b3 01       	movw	r22, r6
    191a:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    191e:	e2 cf       	rjmp	.-60     	; 0x18e4 <vfprintf+0x30>
    1920:	98 2f       	mov	r25, r24
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	88 24       	eor	r8, r8
    1926:	99 24       	eor	r9, r9
    1928:	10 32       	cpi	r17, 0x20	; 32
    192a:	b0 f4       	brcc	.+44     	; 0x1958 <vfprintf+0xa4>
    192c:	9b 32       	cpi	r25, 0x2B	; 43
    192e:	69 f0       	breq	.+26     	; 0x194a <vfprintf+0x96>
    1930:	9c 32       	cpi	r25, 0x2C	; 44
    1932:	28 f4       	brcc	.+10     	; 0x193e <vfprintf+0x8a>
    1934:	90 32       	cpi	r25, 0x20	; 32
    1936:	51 f0       	breq	.+20     	; 0x194c <vfprintf+0x98>
    1938:	93 32       	cpi	r25, 0x23	; 35
    193a:	71 f4       	brne	.+28     	; 0x1958 <vfprintf+0xa4>
    193c:	0b c0       	rjmp	.+22     	; 0x1954 <vfprintf+0xa0>
    193e:	9d 32       	cpi	r25, 0x2D	; 45
    1940:	39 f0       	breq	.+14     	; 0x1950 <vfprintf+0x9c>
    1942:	90 33       	cpi	r25, 0x30	; 48
    1944:	49 f4       	brne	.+18     	; 0x1958 <vfprintf+0xa4>
    1946:	11 60       	ori	r17, 0x01	; 1
    1948:	28 c0       	rjmp	.+80     	; 0x199a <vfprintf+0xe6>
    194a:	12 60       	ori	r17, 0x02	; 2
    194c:	14 60       	ori	r17, 0x04	; 4
    194e:	25 c0       	rjmp	.+74     	; 0x199a <vfprintf+0xe6>
    1950:	18 60       	ori	r17, 0x08	; 8
    1952:	23 c0       	rjmp	.+70     	; 0x199a <vfprintf+0xe6>
    1954:	10 61       	ori	r17, 0x10	; 16
    1956:	21 c0       	rjmp	.+66     	; 0x199a <vfprintf+0xe6>
    1958:	17 fd       	sbrc	r17, 7
    195a:	2a c0       	rjmp	.+84     	; 0x19b0 <vfprintf+0xfc>
    195c:	89 2f       	mov	r24, r25
    195e:	80 53       	subi	r24, 0x30	; 48
    1960:	8a 30       	cpi	r24, 0x0A	; 10
    1962:	78 f4       	brcc	.+30     	; 0x1982 <vfprintf+0xce>
    1964:	16 ff       	sbrs	r17, 6
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <vfprintf+0xc0>
    1968:	fa e0       	ldi	r31, 0x0A	; 10
    196a:	9f 9e       	mul	r9, r31
    196c:	90 2c       	mov	r9, r0
    196e:	11 24       	eor	r1, r1
    1970:	98 0e       	add	r9, r24
    1972:	13 c0       	rjmp	.+38     	; 0x199a <vfprintf+0xe6>
    1974:	3a e0       	ldi	r19, 0x0A	; 10
    1976:	83 9e       	mul	r8, r19
    1978:	80 2c       	mov	r8, r0
    197a:	11 24       	eor	r1, r1
    197c:	88 0e       	add	r8, r24
    197e:	10 62       	ori	r17, 0x20	; 32
    1980:	0c c0       	rjmp	.+24     	; 0x199a <vfprintf+0xe6>
    1982:	9e 32       	cpi	r25, 0x2E	; 46
    1984:	21 f4       	brne	.+8      	; 0x198e <vfprintf+0xda>
    1986:	16 fd       	sbrc	r17, 6
    1988:	14 c3       	rjmp	.+1576   	; 0x1fb2 <vfprintf+0x6fe>
    198a:	10 64       	ori	r17, 0x40	; 64
    198c:	06 c0       	rjmp	.+12     	; 0x199a <vfprintf+0xe6>
    198e:	9c 36       	cpi	r25, 0x6C	; 108
    1990:	11 f4       	brne	.+4      	; 0x1996 <vfprintf+0xe2>
    1992:	10 68       	ori	r17, 0x80	; 128
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0xe6>
    1996:	98 36       	cpi	r25, 0x68	; 104
    1998:	59 f4       	brne	.+22     	; 0x19b0 <vfprintf+0xfc>
    199a:	ee 85       	ldd	r30, Y+14	; 0x0e
    199c:	ff 85       	ldd	r31, Y+15	; 0x0f
    199e:	23 fd       	sbrc	r18, 3
    19a0:	95 91       	lpm	r25, Z+
    19a2:	23 ff       	sbrs	r18, 3
    19a4:	91 91       	ld	r25, Z+
    19a6:	ff 87       	std	Y+15, r31	; 0x0f
    19a8:	ee 87       	std	Y+14, r30	; 0x0e
    19aa:	99 23       	and	r25, r25
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <vfprintf+0xfc>
    19ae:	bc cf       	rjmp	.-136    	; 0x1928 <vfprintf+0x74>
    19b0:	89 2f       	mov	r24, r25
    19b2:	85 54       	subi	r24, 0x45	; 69
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	20 f4       	brcc	.+8      	; 0x19c0 <vfprintf+0x10c>
    19b8:	81 2f       	mov	r24, r17
    19ba:	80 61       	ori	r24, 0x10	; 16
    19bc:	90 5e       	subi	r25, 0xE0	; 224
    19be:	07 c0       	rjmp	.+14     	; 0x19ce <vfprintf+0x11a>
    19c0:	89 2f       	mov	r24, r25
    19c2:	85 56       	subi	r24, 0x65	; 101
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	08 f0       	brcs	.+2      	; 0x19ca <vfprintf+0x116>
    19c8:	9f c1       	rjmp	.+830    	; 0x1d08 <vfprintf+0x454>
    19ca:	81 2f       	mov	r24, r17
    19cc:	8f 7e       	andi	r24, 0xEF	; 239
    19ce:	86 fd       	sbrc	r24, 6
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x122>
    19d2:	76 e0       	ldi	r23, 0x06	; 6
    19d4:	97 2e       	mov	r9, r23
    19d6:	6f e3       	ldi	r22, 0x3F	; 63
    19d8:	f6 2e       	mov	r15, r22
    19da:	f8 22       	and	r15, r24
    19dc:	95 36       	cpi	r25, 0x65	; 101
    19de:	19 f4       	brne	.+6      	; 0x19e6 <vfprintf+0x132>
    19e0:	f0 e4       	ldi	r31, 0x40	; 64
    19e2:	ff 2a       	or	r15, r31
    19e4:	07 c0       	rjmp	.+14     	; 0x19f4 <vfprintf+0x140>
    19e6:	96 36       	cpi	r25, 0x66	; 102
    19e8:	19 f4       	brne	.+6      	; 0x19f0 <vfprintf+0x13c>
    19ea:	20 e8       	ldi	r18, 0x80	; 128
    19ec:	f2 2a       	or	r15, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <vfprintf+0x140>
    19f0:	91 10       	cpse	r9, r1
    19f2:	9a 94       	dec	r9
    19f4:	f7 fe       	sbrs	r15, 7
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <vfprintf+0x158>
    19f8:	3b e3       	ldi	r19, 0x3B	; 59
    19fa:	39 15       	cp	r19, r9
    19fc:	18 f4       	brcc	.+6      	; 0x1a04 <vfprintf+0x150>
    19fe:	5c e3       	ldi	r21, 0x3C	; 60
    1a00:	b5 2e       	mov	r11, r21
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <vfprintf+0x154>
    1a04:	b9 2c       	mov	r11, r9
    1a06:	b3 94       	inc	r11
    1a08:	27 e0       	ldi	r18, 0x07	; 7
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <vfprintf+0x16a>
    1a0c:	47 e0       	ldi	r20, 0x07	; 7
    1a0e:	49 15       	cp	r20, r9
    1a10:	20 f4       	brcc	.+8      	; 0x1a1a <vfprintf+0x166>
    1a12:	bb 24       	eor	r11, r11
    1a14:	47 e0       	ldi	r20, 0x07	; 7
    1a16:	94 2e       	mov	r9, r20
    1a18:	f7 cf       	rjmp	.-18     	; 0x1a08 <vfprintf+0x154>
    1a1a:	29 2d       	mov	r18, r9
    1a1c:	bb 24       	eor	r11, r11
    1a1e:	c6 01       	movw	r24, r12
    1a20:	04 96       	adiw	r24, 0x04	; 4
    1a22:	9d 87       	std	Y+13, r25	; 0x0d
    1a24:	8c 87       	std	Y+12, r24	; 0x0c
    1a26:	f6 01       	movw	r30, r12
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	ae 01       	movw	r20, r28
    1a32:	4f 5f       	subi	r20, 0xFF	; 255
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255
    1a36:	0b 2d       	mov	r16, r11
    1a38:	0e 94 3f 10 	call	0x207e	; 0x207e <__ftoa_engine>
    1a3c:	6c 01       	movw	r12, r24
    1a3e:	09 81       	ldd	r16, Y+1	; 0x01
    1a40:	20 2e       	mov	r2, r16
    1a42:	33 24       	eor	r3, r3
    1a44:	00 ff       	sbrs	r16, 0
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <vfprintf+0x19c>
    1a48:	03 fd       	sbrc	r16, 3
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x19c>
    1a4c:	1d e2       	ldi	r17, 0x2D	; 45
    1a4e:	09 c0       	rjmp	.+18     	; 0x1a62 <vfprintf+0x1ae>
    1a50:	f1 fe       	sbrs	r15, 1
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <vfprintf+0x1a4>
    1a54:	1b e2       	ldi	r17, 0x2B	; 43
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <vfprintf+0x1ae>
    1a58:	f2 fc       	sbrc	r15, 2
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x1ac>
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <vfprintf+0x1ae>
    1a60:	10 e2       	ldi	r17, 0x20	; 32
    1a62:	c1 01       	movw	r24, r2
    1a64:	8c 70       	andi	r24, 0x0C	; 12
    1a66:	90 70       	andi	r25, 0x00	; 0
    1a68:	89 2b       	or	r24, r25
    1a6a:	b9 f1       	breq	.+110    	; 0x1ada <vfprintf+0x226>
    1a6c:	11 23       	and	r17, r17
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <vfprintf+0x1c0>
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <vfprintf+0x1c2>
    1a74:	84 e0       	ldi	r24, 0x04	; 4
    1a76:	88 15       	cp	r24, r8
    1a78:	10 f0       	brcs	.+4      	; 0x1a7e <vfprintf+0x1ca>
    1a7a:	88 24       	eor	r8, r8
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <vfprintf+0x1de>
    1a7e:	88 1a       	sub	r8, r24
    1a80:	f3 fc       	sbrc	r15, 3
    1a82:	07 c0       	rjmp	.+14     	; 0x1a92 <vfprintf+0x1de>
    1a84:	80 e2       	ldi	r24, 0x20	; 32
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	b3 01       	movw	r22, r6
    1a8a:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1a8e:	8a 94       	dec	r8
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <vfprintf+0x1d0>
    1a92:	11 23       	and	r17, r17
    1a94:	29 f0       	breq	.+10     	; 0x1aa0 <vfprintf+0x1ec>
    1a96:	81 2f       	mov	r24, r17
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	b3 01       	movw	r22, r6
    1a9c:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1aa0:	23 fe       	sbrs	r2, 3
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <vfprintf+0x1f6>
    1aa4:	04 e5       	ldi	r16, 0x54	; 84
    1aa6:	10 e0       	ldi	r17, 0x00	; 0
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <vfprintf+0x212>
    1aaa:	08 e5       	ldi	r16, 0x58	; 88
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <vfprintf+0x212>
    1ab0:	e1 14       	cp	r14, r1
    1ab2:	f1 04       	cpc	r15, r1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <vfprintf+0x204>
    1ab6:	80 52       	subi	r24, 0x20	; 32
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	b3 01       	movw	r22, r6
    1abc:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1ac0:	0f 5f       	subi	r16, 0xFF	; 255
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <vfprintf+0x21c>
    1ac6:	ef 2c       	mov	r14, r15
    1ac8:	ff 24       	eor	r15, r15
    1aca:	f0 e1       	ldi	r31, 0x10	; 16
    1acc:	ef 22       	and	r14, r31
    1ace:	ff 24       	eor	r15, r15
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	84 91       	lpm	r24, Z+
    1ad4:	88 23       	and	r24, r24
    1ad6:	61 f7       	brne	.-40     	; 0x1ab0 <vfprintf+0x1fc>
    1ad8:	14 c1       	rjmp	.+552    	; 0x1d02 <vfprintf+0x44e>
    1ada:	f7 fe       	sbrs	r15, 7
    1adc:	12 c0       	rjmp	.+36     	; 0x1b02 <vfprintf+0x24e>
    1ade:	bc 0c       	add	r11, r12
    1ae0:	24 fe       	sbrs	r2, 4
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <vfprintf+0x238>
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	81 33       	cpi	r24, 0x31	; 49
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <vfprintf+0x238>
    1aea:	ba 94       	dec	r11
    1aec:	1b 14       	cp	r1, r11
    1aee:	1c f0       	brlt	.+6      	; 0x1af6 <vfprintf+0x242>
    1af0:	bb 24       	eor	r11, r11
    1af2:	b3 94       	inc	r11
    1af4:	2d c0       	rjmp	.+90     	; 0x1b50 <vfprintf+0x29c>
    1af6:	f8 e0       	ldi	r31, 0x08	; 8
    1af8:	fb 15       	cp	r31, r11
    1afa:	50 f5       	brcc	.+84     	; 0x1b50 <vfprintf+0x29c>
    1afc:	38 e0       	ldi	r19, 0x08	; 8
    1afe:	b3 2e       	mov	r11, r19
    1b00:	27 c0       	rjmp	.+78     	; 0x1b50 <vfprintf+0x29c>
    1b02:	f6 fc       	sbrc	r15, 6
    1b04:	25 c0       	rjmp	.+74     	; 0x1b50 <vfprintf+0x29c>
    1b06:	89 2d       	mov	r24, r9
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	8c 15       	cp	r24, r12
    1b0c:	9d 05       	cpc	r25, r13
    1b0e:	4c f0       	brlt	.+18     	; 0x1b22 <vfprintf+0x26e>
    1b10:	2c ef       	ldi	r18, 0xFC	; 252
    1b12:	c2 16       	cp	r12, r18
    1b14:	2f ef       	ldi	r18, 0xFF	; 255
    1b16:	d2 06       	cpc	r13, r18
    1b18:	24 f0       	brlt	.+8      	; 0x1b22 <vfprintf+0x26e>
    1b1a:	30 e8       	ldi	r19, 0x80	; 128
    1b1c:	f3 2a       	or	r15, r19
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <vfprintf+0x26e>
    1b20:	9a 94       	dec	r9
    1b22:	99 20       	and	r9, r9
    1b24:	49 f0       	breq	.+18     	; 0x1b38 <vfprintf+0x284>
    1b26:	e2 e0       	ldi	r30, 0x02	; 2
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	ec 0f       	add	r30, r28
    1b2c:	fd 1f       	adc	r31, r29
    1b2e:	e9 0d       	add	r30, r9
    1b30:	f1 1d       	adc	r31, r1
    1b32:	80 81       	ld	r24, Z
    1b34:	80 33       	cpi	r24, 0x30	; 48
    1b36:	a1 f3       	breq	.-24     	; 0x1b20 <vfprintf+0x26c>
    1b38:	f7 fe       	sbrs	r15, 7
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <vfprintf+0x29c>
    1b3c:	b9 2c       	mov	r11, r9
    1b3e:	b3 94       	inc	r11
    1b40:	89 2d       	mov	r24, r9
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	c8 16       	cp	r12, r24
    1b46:	d9 06       	cpc	r13, r25
    1b48:	14 f0       	brlt	.+4      	; 0x1b4e <vfprintf+0x29a>
    1b4a:	99 24       	eor	r9, r9
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <vfprintf+0x29c>
    1b4e:	9c 18       	sub	r9, r12
    1b50:	f7 fc       	sbrc	r15, 7
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <vfprintf+0x2a6>
    1b54:	25 e0       	ldi	r18, 0x05	; 5
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <vfprintf+0x2b8>
    1b5a:	1c 14       	cp	r1, r12
    1b5c:	1d 04       	cpc	r1, r13
    1b5e:	1c f0       	brlt	.+6      	; 0x1b66 <vfprintf+0x2b2>
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	03 c0       	rjmp	.+6      	; 0x1b6c <vfprintf+0x2b8>
    1b66:	96 01       	movw	r18, r12
    1b68:	2f 5f       	subi	r18, 0xFF	; 255
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	11 23       	and	r17, r17
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <vfprintf+0x2c0>
    1b70:	2f 5f       	subi	r18, 0xFF	; 255
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
    1b74:	99 20       	and	r9, r9
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <vfprintf+0x2ce>
    1b78:	89 2d       	mov	r24, r9
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	28 0f       	add	r18, r24
    1b80:	39 1f       	adc	r19, r25
    1b82:	88 2d       	mov	r24, r8
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	28 17       	cp	r18, r24
    1b88:	39 07       	cpc	r19, r25
    1b8a:	14 f0       	brlt	.+4      	; 0x1b90 <vfprintf+0x2dc>
    1b8c:	88 24       	eor	r8, r8
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <vfprintf+0x2de>
    1b90:	82 1a       	sub	r8, r18
    1b92:	4f 2c       	mov	r4, r15
    1b94:	55 24       	eor	r5, r5
    1b96:	c2 01       	movw	r24, r4
    1b98:	89 70       	andi	r24, 0x09	; 9
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	89 2b       	or	r24, r25
    1b9e:	39 f0       	breq	.+14     	; 0x1bae <vfprintf+0x2fa>
    1ba0:	08 c0       	rjmp	.+16     	; 0x1bb2 <vfprintf+0x2fe>
    1ba2:	80 e2       	ldi	r24, 0x20	; 32
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	b3 01       	movw	r22, r6
    1ba8:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1bac:	8a 94       	dec	r8
    1bae:	88 20       	and	r8, r8
    1bb0:	c1 f7       	brne	.-16     	; 0x1ba2 <vfprintf+0x2ee>
    1bb2:	11 23       	and	r17, r17
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <vfprintf+0x30c>
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	b3 01       	movw	r22, r6
    1bbc:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1bc0:	43 fe       	sbrs	r4, 3
    1bc2:	07 c0       	rjmp	.+14     	; 0x1bd2 <vfprintf+0x31e>
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0x322>
    1bc6:	80 e3       	ldi	r24, 0x30	; 48
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	b3 01       	movw	r22, r6
    1bcc:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1bd0:	8a 94       	dec	r8
    1bd2:	88 20       	and	r8, r8
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <vfprintf+0x312>
    1bd6:	f7 fe       	sbrs	r15, 7
    1bd8:	46 c0       	rjmp	.+140    	; 0x1c66 <vfprintf+0x3b2>
    1bda:	86 01       	movw	r16, r12
    1bdc:	d7 fe       	sbrs	r13, 7
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <vfprintf+0x330>
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	10 e0       	ldi	r17, 0x00	; 0
    1be4:	76 01       	movw	r14, r12
    1be6:	08 94       	sec
    1be8:	e1 1c       	adc	r14, r1
    1bea:	f1 1c       	adc	r15, r1
    1bec:	e0 1a       	sub	r14, r16
    1bee:	f1 0a       	sbc	r15, r17
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	4c 0f       	add	r20, r28
    1bf6:	5d 1f       	adc	r21, r29
    1bf8:	e4 0e       	add	r14, r20
    1bfa:	f5 1e       	adc	r15, r21
    1bfc:	26 01       	movw	r4, r12
    1bfe:	4b 18       	sub	r4, r11
    1c00:	51 08       	sbc	r5, r1
    1c02:	89 2d       	mov	r24, r9
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	aa 24       	eor	r10, r10
    1c08:	bb 24       	eor	r11, r11
    1c0a:	a8 1a       	sub	r10, r24
    1c0c:	b9 0a       	sbc	r11, r25
    1c0e:	5f ef       	ldi	r21, 0xFF	; 255
    1c10:	0f 3f       	cpi	r16, 0xFF	; 255
    1c12:	15 07       	cpc	r17, r21
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <vfprintf+0x36c>
    1c16:	8e e2       	ldi	r24, 0x2E	; 46
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	b3 01       	movw	r22, r6
    1c1c:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1c20:	c0 16       	cp	r12, r16
    1c22:	d1 06       	cpc	r13, r17
    1c24:	34 f0       	brlt	.+12     	; 0x1c32 <vfprintf+0x37e>
    1c26:	40 16       	cp	r4, r16
    1c28:	51 06       	cpc	r5, r17
    1c2a:	1c f4       	brge	.+6      	; 0x1c32 <vfprintf+0x37e>
    1c2c:	f7 01       	movw	r30, r14
    1c2e:	80 81       	ld	r24, Z
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <vfprintf+0x380>
    1c32:	80 e3       	ldi	r24, 0x30	; 48
    1c34:	01 50       	subi	r16, 0x01	; 1
    1c36:	10 40       	sbci	r17, 0x00	; 0
    1c38:	08 94       	sec
    1c3a:	e1 1c       	adc	r14, r1
    1c3c:	f1 1c       	adc	r15, r1
    1c3e:	0a 15       	cp	r16, r10
    1c40:	1b 05       	cpc	r17, r11
    1c42:	2c f0       	brlt	.+10     	; 0x1c4e <vfprintf+0x39a>
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	b3 01       	movw	r22, r6
    1c48:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1c4c:	e0 cf       	rjmp	.-64     	; 0x1c0e <vfprintf+0x35a>
    1c4e:	0c 15       	cp	r16, r12
    1c50:	1d 05       	cpc	r17, r13
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <vfprintf+0x3ae>
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	96 33       	cpi	r25, 0x36	; 54
    1c58:	18 f4       	brcc	.+6      	; 0x1c60 <vfprintf+0x3ac>
    1c5a:	95 33       	cpi	r25, 0x35	; 53
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <vfprintf+0x3ae>
    1c5e:	24 fe       	sbrs	r2, 4
    1c60:	81 e3       	ldi	r24, 0x31	; 49
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	4b c0       	rjmp	.+150    	; 0x1cfc <vfprintf+0x448>
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	81 33       	cpi	r24, 0x31	; 49
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <vfprintf+0x3ba>
    1c6c:	0f 7e       	andi	r16, 0xEF	; 239
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	b3 01       	movw	r22, r6
    1c72:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1c76:	99 20       	and	r9, r9
    1c78:	a1 f0       	breq	.+40     	; 0x1ca2 <vfprintf+0x3ee>
    1c7a:	8e e2       	ldi	r24, 0x2E	; 46
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	b3 01       	movw	r22, r6
    1c80:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1c84:	12 e0       	ldi	r17, 0x02	; 2
    1c86:	e1 e0       	ldi	r30, 0x01	; 1
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	ec 0f       	add	r30, r28
    1c8c:	fd 1f       	adc	r31, r29
    1c8e:	e1 0f       	add	r30, r17
    1c90:	f1 1d       	adc	r31, r1
    1c92:	1f 5f       	subi	r17, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	b3 01       	movw	r22, r6
    1c9a:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1c9e:	9a 94       	dec	r9
    1ca0:	91 f7       	brne	.-28     	; 0x1c86 <vfprintf+0x3d2>
    1ca2:	44 fc       	sbrc	r4, 4
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <vfprintf+0x3f8>
    1ca6:	85 e6       	ldi	r24, 0x65	; 101
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <vfprintf+0x3fc>
    1cac:	85 e4       	ldi	r24, 0x45	; 69
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	b3 01       	movw	r22, r6
    1cb2:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1cb6:	d7 fc       	sbrc	r13, 7
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <vfprintf+0x410>
    1cba:	c1 14       	cp	r12, r1
    1cbc:	d1 04       	cpc	r13, r1
    1cbe:	41 f4       	brne	.+16     	; 0x1cd0 <vfprintf+0x41c>
    1cc0:	04 ff       	sbrs	r16, 4
    1cc2:	06 c0       	rjmp	.+12     	; 0x1cd0 <vfprintf+0x41c>
    1cc4:	d0 94       	com	r13
    1cc6:	c1 94       	neg	r12
    1cc8:	d1 08       	sbc	r13, r1
    1cca:	d3 94       	inc	r13
    1ccc:	8d e2       	ldi	r24, 0x2D	; 45
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <vfprintf+0x41e>
    1cd0:	8b e2       	ldi	r24, 0x2B	; 43
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	b3 01       	movw	r22, r6
    1cd6:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1cda:	80 e3       	ldi	r24, 0x30	; 48
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <vfprintf+0x434>
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	26 ef       	ldi	r18, 0xF6	; 246
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	c2 0e       	add	r12, r18
    1ce6:	d3 1e       	adc	r13, r19
    1ce8:	3a e0       	ldi	r19, 0x0A	; 10
    1cea:	c3 16       	cp	r12, r19
    1cec:	d1 04       	cpc	r13, r1
    1cee:	bc f7       	brge	.-18     	; 0x1cde <vfprintf+0x42a>
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	b3 01       	movw	r22, r6
    1cf4:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1cf8:	c6 01       	movw	r24, r12
    1cfa:	c0 96       	adiw	r24, 0x30	; 48
    1cfc:	b3 01       	movw	r22, r6
    1cfe:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1d02:	cc 84       	ldd	r12, Y+12	; 0x0c
    1d04:	dd 84       	ldd	r13, Y+13	; 0x0d
    1d06:	52 c1       	rjmp	.+676    	; 0x1fac <vfprintf+0x6f8>
    1d08:	93 36       	cpi	r25, 0x63	; 99
    1d0a:	31 f0       	breq	.+12     	; 0x1d18 <vfprintf+0x464>
    1d0c:	93 37       	cpi	r25, 0x73	; 115
    1d0e:	99 f0       	breq	.+38     	; 0x1d36 <vfprintf+0x482>
    1d10:	93 35       	cpi	r25, 0x53	; 83
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <vfprintf+0x462>
    1d14:	59 c0       	rjmp	.+178    	; 0x1dc8 <vfprintf+0x514>
    1d16:	23 c0       	rjmp	.+70     	; 0x1d5e <vfprintf+0x4aa>
    1d18:	f6 01       	movw	r30, r12
    1d1a:	80 81       	ld	r24, Z
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	5e 01       	movw	r10, r28
    1d20:	08 94       	sec
    1d22:	a1 1c       	adc	r10, r1
    1d24:	b1 1c       	adc	r11, r1
    1d26:	22 e0       	ldi	r18, 0x02	; 2
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	c2 0e       	add	r12, r18
    1d2c:	d3 1e       	adc	r13, r19
    1d2e:	21 e0       	ldi	r18, 0x01	; 1
    1d30:	e2 2e       	mov	r14, r18
    1d32:	f1 2c       	mov	r15, r1
    1d34:	12 c0       	rjmp	.+36     	; 0x1d5a <vfprintf+0x4a6>
    1d36:	f6 01       	movw	r30, r12
    1d38:	a0 80       	ld	r10, Z
    1d3a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d3c:	16 fd       	sbrc	r17, 6
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <vfprintf+0x492>
    1d40:	6f ef       	ldi	r22, 0xFF	; 255
    1d42:	7f ef       	ldi	r23, 0xFF	; 255
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <vfprintf+0x496>
    1d46:	69 2d       	mov	r22, r9
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	22 e0       	ldi	r18, 0x02	; 2
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	c2 0e       	add	r12, r18
    1d50:	d3 1e       	adc	r13, r19
    1d52:	c5 01       	movw	r24, r10
    1d54:	0e 94 22 11 	call	0x2244	; 0x2244 <strnlen>
    1d58:	7c 01       	movw	r14, r24
    1d5a:	1f 77       	andi	r17, 0x7F	; 127
    1d5c:	13 c0       	rjmp	.+38     	; 0x1d84 <vfprintf+0x4d0>
    1d5e:	f6 01       	movw	r30, r12
    1d60:	a0 80       	ld	r10, Z
    1d62:	b1 80       	ldd	r11, Z+1	; 0x01
    1d64:	16 fd       	sbrc	r17, 6
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <vfprintf+0x4ba>
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	7f ef       	ldi	r23, 0xFF	; 255
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <vfprintf+0x4be>
    1d6e:	69 2d       	mov	r22, r9
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	c2 0e       	add	r12, r18
    1d78:	d3 1e       	adc	r13, r19
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	0e 94 17 11 	call	0x222e	; 0x222e <strnlen_P>
    1d80:	7c 01       	movw	r14, r24
    1d82:	10 68       	ori	r17, 0x80	; 128
    1d84:	13 ff       	sbrs	r17, 3
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <vfprintf+0x4e2>
    1d88:	1b c0       	rjmp	.+54     	; 0x1dc0 <vfprintf+0x50c>
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	b3 01       	movw	r22, r6
    1d90:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1d94:	8a 94       	dec	r8
    1d96:	88 2d       	mov	r24, r8
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	e8 16       	cp	r14, r24
    1d9c:	f9 06       	cpc	r15, r25
    1d9e:	a8 f3       	brcs	.-22     	; 0x1d8a <vfprintf+0x4d6>
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <vfprintf+0x50c>
    1da2:	f5 01       	movw	r30, r10
    1da4:	17 fd       	sbrc	r17, 7
    1da6:	85 91       	lpm	r24, Z+
    1da8:	17 ff       	sbrs	r17, 7
    1daa:	81 91       	ld	r24, Z+
    1dac:	5f 01       	movw	r10, r30
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	b3 01       	movw	r22, r6
    1db2:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1db6:	81 10       	cpse	r8, r1
    1db8:	8a 94       	dec	r8
    1dba:	08 94       	sec
    1dbc:	e1 08       	sbc	r14, r1
    1dbe:	f1 08       	sbc	r15, r1
    1dc0:	e1 14       	cp	r14, r1
    1dc2:	f1 04       	cpc	r15, r1
    1dc4:	71 f7       	brne	.-36     	; 0x1da2 <vfprintf+0x4ee>
    1dc6:	f2 c0       	rjmp	.+484    	; 0x1fac <vfprintf+0x6f8>
    1dc8:	94 36       	cpi	r25, 0x64	; 100
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <vfprintf+0x51c>
    1dcc:	99 36       	cpi	r25, 0x69	; 105
    1dce:	89 f5       	brne	.+98     	; 0x1e32 <vfprintf+0x57e>
    1dd0:	17 ff       	sbrs	r17, 7
    1dd2:	08 c0       	rjmp	.+16     	; 0x1de4 <vfprintf+0x530>
    1dd4:	f6 01       	movw	r30, r12
    1dd6:	20 81       	ld	r18, Z
    1dd8:	31 81       	ldd	r19, Z+1	; 0x01
    1dda:	42 81       	ldd	r20, Z+2	; 0x02
    1ddc:	53 81       	ldd	r21, Z+3	; 0x03
    1dde:	84 e0       	ldi	r24, 0x04	; 4
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0a c0       	rjmp	.+20     	; 0x1df8 <vfprintf+0x544>
    1de4:	f6 01       	movw	r30, r12
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	9c 01       	movw	r18, r24
    1dec:	44 27       	eor	r20, r20
    1dee:	37 fd       	sbrc	r19, 7
    1df0:	40 95       	com	r20
    1df2:	54 2f       	mov	r21, r20
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	c8 0e       	add	r12, r24
    1dfa:	d9 1e       	adc	r13, r25
    1dfc:	9f e6       	ldi	r25, 0x6F	; 111
    1dfe:	f9 2e       	mov	r15, r25
    1e00:	f1 22       	and	r15, r17
    1e02:	57 ff       	sbrs	r21, 7
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <vfprintf+0x564>
    1e06:	50 95       	com	r21
    1e08:	40 95       	com	r20
    1e0a:	30 95       	com	r19
    1e0c:	21 95       	neg	r18
    1e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e10:	4f 4f       	sbci	r20, 0xFF	; 255
    1e12:	5f 4f       	sbci	r21, 0xFF	; 255
    1e14:	90 e8       	ldi	r25, 0x80	; 128
    1e16:	f9 2a       	or	r15, r25
    1e18:	ca 01       	movw	r24, r20
    1e1a:	b9 01       	movw	r22, r18
    1e1c:	ae 01       	movw	r20, r28
    1e1e:	4f 5f       	subi	r20, 0xFF	; 255
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	2a e0       	ldi	r18, 0x0A	; 10
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__ultoa_invert>
    1e2a:	e8 2e       	mov	r14, r24
    1e2c:	e8 89       	ldd	r30, Y+16	; 0x10
    1e2e:	ee 1a       	sub	r14, r30
    1e30:	41 c0       	rjmp	.+130    	; 0x1eb4 <vfprintf+0x600>
    1e32:	95 37       	cpi	r25, 0x75	; 117
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <vfprintf+0x58a>
    1e36:	1f 7e       	andi	r17, 0xEF	; 239
    1e38:	2a e0       	ldi	r18, 0x0A	; 10
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	1c c0       	rjmp	.+56     	; 0x1e76 <vfprintf+0x5c2>
    1e3e:	19 7f       	andi	r17, 0xF9	; 249
    1e40:	9f 36       	cpi	r25, 0x6F	; 111
    1e42:	61 f0       	breq	.+24     	; 0x1e5c <vfprintf+0x5a8>
    1e44:	90 37       	cpi	r25, 0x70	; 112
    1e46:	20 f4       	brcc	.+8      	; 0x1e50 <vfprintf+0x59c>
    1e48:	98 35       	cpi	r25, 0x58	; 88
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <vfprintf+0x59a>
    1e4c:	b2 c0       	rjmp	.+356    	; 0x1fb2 <vfprintf+0x6fe>
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <vfprintf+0x5ba>
    1e50:	90 37       	cpi	r25, 0x70	; 112
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <vfprintf+0x5ae>
    1e54:	98 37       	cpi	r25, 0x78	; 120
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <vfprintf+0x5a6>
    1e58:	ac c0       	rjmp	.+344    	; 0x1fb2 <vfprintf+0x6fe>
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <vfprintf+0x5b0>
    1e5c:	28 e0       	ldi	r18, 0x08	; 8
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	0a c0       	rjmp	.+20     	; 0x1e76 <vfprintf+0x5c2>
    1e62:	10 61       	ori	r17, 0x10	; 16
    1e64:	14 fd       	sbrc	r17, 4
    1e66:	14 60       	ori	r17, 0x04	; 4
    1e68:	20 e1       	ldi	r18, 0x10	; 16
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <vfprintf+0x5c2>
    1e6e:	14 fd       	sbrc	r17, 4
    1e70:	16 60       	ori	r17, 0x06	; 6
    1e72:	20 e1       	ldi	r18, 0x10	; 16
    1e74:	32 e0       	ldi	r19, 0x02	; 2
    1e76:	17 ff       	sbrs	r17, 7
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <vfprintf+0x5d6>
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	44 e0       	ldi	r20, 0x04	; 4
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	08 c0       	rjmp	.+16     	; 0x1e9a <vfprintf+0x5e6>
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	bc 01       	movw	r22, r24
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	42 e0       	ldi	r20, 0x02	; 2
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	c4 0e       	add	r12, r20
    1e9c:	d5 1e       	adc	r13, r21
    1e9e:	ae 01       	movw	r20, r28
    1ea0:	4f 5f       	subi	r20, 0xFF	; 255
    1ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__ultoa_invert>
    1ea8:	e8 2e       	mov	r14, r24
    1eaa:	58 89       	ldd	r21, Y+16	; 0x10
    1eac:	e5 1a       	sub	r14, r21
    1eae:	8f e7       	ldi	r24, 0x7F	; 127
    1eb0:	f8 2e       	mov	r15, r24
    1eb2:	f1 22       	and	r15, r17
    1eb4:	f6 fe       	sbrs	r15, 6
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <vfprintf+0x61a>
    1eb8:	8e ef       	ldi	r24, 0xFE	; 254
    1eba:	f8 22       	and	r15, r24
    1ebc:	e9 14       	cp	r14, r9
    1ebe:	38 f4       	brcc	.+14     	; 0x1ece <vfprintf+0x61a>
    1ec0:	f4 fe       	sbrs	r15, 4
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <vfprintf+0x61e>
    1ec4:	f2 fc       	sbrc	r15, 2
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <vfprintf+0x61e>
    1ec8:	9f ee       	ldi	r25, 0xEF	; 239
    1eca:	f9 22       	and	r15, r25
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <vfprintf+0x61e>
    1ece:	1e 2d       	mov	r17, r14
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <vfprintf+0x620>
    1ed2:	19 2d       	mov	r17, r9
    1ed4:	f4 fe       	sbrs	r15, 4
    1ed6:	0d c0       	rjmp	.+26     	; 0x1ef2 <vfprintf+0x63e>
    1ed8:	fe 01       	movw	r30, r28
    1eda:	ee 0d       	add	r30, r14
    1edc:	f1 1d       	adc	r31, r1
    1ede:	80 81       	ld	r24, Z
    1ee0:	80 33       	cpi	r24, 0x30	; 48
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <vfprintf+0x636>
    1ee4:	e9 ee       	ldi	r30, 0xE9	; 233
    1ee6:	fe 22       	and	r15, r30
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <vfprintf+0x646>
    1eea:	1f 5f       	subi	r17, 0xFF	; 255
    1eec:	f2 fe       	sbrs	r15, 2
    1eee:	05 c0       	rjmp	.+10     	; 0x1efa <vfprintf+0x646>
    1ef0:	03 c0       	rjmp	.+6      	; 0x1ef8 <vfprintf+0x644>
    1ef2:	8f 2d       	mov	r24, r15
    1ef4:	86 78       	andi	r24, 0x86	; 134
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <vfprintf+0x646>
    1ef8:	1f 5f       	subi	r17, 0xFF	; 255
    1efa:	0f 2d       	mov	r16, r15
    1efc:	f3 fc       	sbrc	r15, 3
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <vfprintf+0x674>
    1f00:	f0 fe       	sbrs	r15, 0
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <vfprintf+0x66e>
    1f04:	18 15       	cp	r17, r8
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <vfprintf+0x658>
    1f08:	9e 2c       	mov	r9, r14
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <vfprintf+0x66e>
    1f0c:	9e 2c       	mov	r9, r14
    1f0e:	98 0c       	add	r9, r8
    1f10:	91 1a       	sub	r9, r17
    1f12:	18 2d       	mov	r17, r8
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <vfprintf+0x66e>
    1f16:	80 e2       	ldi	r24, 0x20	; 32
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	b3 01       	movw	r22, r6
    1f1c:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1f20:	1f 5f       	subi	r17, 0xFF	; 255
    1f22:	18 15       	cp	r17, r8
    1f24:	c0 f3       	brcs	.-16     	; 0x1f16 <vfprintf+0x662>
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <vfprintf+0x67c>
    1f28:	18 15       	cp	r17, r8
    1f2a:	10 f4       	brcc	.+4      	; 0x1f30 <vfprintf+0x67c>
    1f2c:	81 1a       	sub	r8, r17
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <vfprintf+0x67e>
    1f30:	88 24       	eor	r8, r8
    1f32:	04 ff       	sbrs	r16, 4
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <vfprintf+0x6a0>
    1f36:	80 e3       	ldi	r24, 0x30	; 48
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	b3 01       	movw	r22, r6
    1f3c:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1f40:	02 ff       	sbrs	r16, 2
    1f42:	1d c0       	rjmp	.+58     	; 0x1f7e <vfprintf+0x6ca>
    1f44:	01 fd       	sbrc	r16, 1
    1f46:	03 c0       	rjmp	.+6      	; 0x1f4e <vfprintf+0x69a>
    1f48:	88 e7       	ldi	r24, 0x78	; 120
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <vfprintf+0x6b6>
    1f4e:	88 e5       	ldi	r24, 0x58	; 88
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <vfprintf+0x6b6>
    1f54:	80 2f       	mov	r24, r16
    1f56:	86 78       	andi	r24, 0x86	; 134
    1f58:	91 f0       	breq	.+36     	; 0x1f7e <vfprintf+0x6ca>
    1f5a:	01 ff       	sbrs	r16, 1
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <vfprintf+0x6ae>
    1f5e:	8b e2       	ldi	r24, 0x2B	; 43
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <vfprintf+0x6b0>
    1f62:	80 e2       	ldi	r24, 0x20	; 32
    1f64:	f7 fc       	sbrc	r15, 7
    1f66:	8d e2       	ldi	r24, 0x2D	; 45
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	b3 01       	movw	r22, r6
    1f6c:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0x6ca>
    1f72:	80 e3       	ldi	r24, 0x30	; 48
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	b3 01       	movw	r22, r6
    1f78:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1f7c:	9a 94       	dec	r9
    1f7e:	e9 14       	cp	r14, r9
    1f80:	c0 f3       	brcs	.-16     	; 0x1f72 <vfprintf+0x6be>
    1f82:	ea 94       	dec	r14
    1f84:	e1 e0       	ldi	r30, 0x01	; 1
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	ec 0f       	add	r30, r28
    1f8a:	fd 1f       	adc	r31, r29
    1f8c:	ee 0d       	add	r30, r14
    1f8e:	f1 1d       	adc	r31, r1
    1f90:	80 81       	ld	r24, Z
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	b3 01       	movw	r22, r6
    1f96:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1f9a:	ee 20       	and	r14, r14
    1f9c:	91 f7       	brne	.-28     	; 0x1f82 <vfprintf+0x6ce>
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <vfprintf+0x6f8>
    1fa0:	80 e2       	ldi	r24, 0x20	; 32
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	b3 01       	movw	r22, r6
    1fa6:	0e 94 2d 11 	call	0x225a	; 0x225a <fputc>
    1faa:	8a 94       	dec	r8
    1fac:	88 20       	and	r8, r8
    1fae:	c1 f7       	brne	.-16     	; 0x1fa0 <vfprintf+0x6ec>
    1fb0:	99 cc       	rjmp	.-1742   	; 0x18e4 <vfprintf+0x30>
    1fb2:	f3 01       	movw	r30, r6
    1fb4:	66 81       	ldd	r22, Z+6	; 0x06
    1fb6:	77 81       	ldd	r23, Z+7	; 0x07
    1fb8:	cb 01       	movw	r24, r22
    1fba:	61 96       	adiw	r28, 0x11	; 17
    1fbc:	e2 e1       	ldi	r30, 0x12	; 18
    1fbe:	0c 94 10 10 	jmp	0x2020	; 0x2020 <__epilogue_restores__>

00001fc2 <__divmodhi4>:
    1fc2:	97 fb       	bst	r25, 7
    1fc4:	09 2e       	mov	r0, r25
    1fc6:	07 26       	eor	r0, r23
    1fc8:	0a d0       	rcall	.+20     	; 0x1fde <__divmodhi4_neg1>
    1fca:	77 fd       	sbrc	r23, 7
    1fcc:	04 d0       	rcall	.+8      	; 0x1fd6 <__divmodhi4_neg2>
    1fce:	43 d0       	rcall	.+134    	; 0x2056 <__udivmodhi4>
    1fd0:	06 d0       	rcall	.+12     	; 0x1fde <__divmodhi4_neg1>
    1fd2:	00 20       	and	r0, r0
    1fd4:	1a f4       	brpl	.+6      	; 0x1fdc <__divmodhi4_exit>

00001fd6 <__divmodhi4_neg2>:
    1fd6:	70 95       	com	r23
    1fd8:	61 95       	neg	r22
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255

00001fdc <__divmodhi4_exit>:
    1fdc:	08 95       	ret

00001fde <__divmodhi4_neg1>:
    1fde:	f6 f7       	brtc	.-4      	; 0x1fdc <__divmodhi4_exit>
    1fe0:	90 95       	com	r25
    1fe2:	81 95       	neg	r24
    1fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe6:	08 95       	ret

00001fe8 <__prologue_saves__>:
    1fe8:	2f 92       	push	r2
    1fea:	3f 92       	push	r3
    1fec:	4f 92       	push	r4
    1fee:	5f 92       	push	r5
    1ff0:	6f 92       	push	r6
    1ff2:	7f 92       	push	r7
    1ff4:	8f 92       	push	r8
    1ff6:	9f 92       	push	r9
    1ff8:	af 92       	push	r10
    1ffa:	bf 92       	push	r11
    1ffc:	cf 92       	push	r12
    1ffe:	df 92       	push	r13
    2000:	ef 92       	push	r14
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	cf 93       	push	r28
    200a:	df 93       	push	r29
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	ca 1b       	sub	r28, r26
    2012:	db 0b       	sbc	r29, r27
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	09 94       	ijmp

00002020 <__epilogue_restores__>:
    2020:	2a 88       	ldd	r2, Y+18	; 0x12
    2022:	39 88       	ldd	r3, Y+17	; 0x11
    2024:	48 88       	ldd	r4, Y+16	; 0x10
    2026:	5f 84       	ldd	r5, Y+15	; 0x0f
    2028:	6e 84       	ldd	r6, Y+14	; 0x0e
    202a:	7d 84       	ldd	r7, Y+13	; 0x0d
    202c:	8c 84       	ldd	r8, Y+12	; 0x0c
    202e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2030:	aa 84       	ldd	r10, Y+10	; 0x0a
    2032:	b9 84       	ldd	r11, Y+9	; 0x09
    2034:	c8 84       	ldd	r12, Y+8	; 0x08
    2036:	df 80       	ldd	r13, Y+7	; 0x07
    2038:	ee 80       	ldd	r14, Y+6	; 0x06
    203a:	fd 80       	ldd	r15, Y+5	; 0x05
    203c:	0c 81       	ldd	r16, Y+4	; 0x04
    203e:	1b 81       	ldd	r17, Y+3	; 0x03
    2040:	aa 81       	ldd	r26, Y+2	; 0x02
    2042:	b9 81       	ldd	r27, Y+1	; 0x01
    2044:	ce 0f       	add	r28, r30
    2046:	d1 1d       	adc	r29, r1
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	ed 01       	movw	r28, r26
    2054:	08 95       	ret

00002056 <__udivmodhi4>:
    2056:	aa 1b       	sub	r26, r26
    2058:	bb 1b       	sub	r27, r27
    205a:	51 e1       	ldi	r21, 0x11	; 17
    205c:	07 c0       	rjmp	.+14     	; 0x206c <__udivmodhi4_ep>

0000205e <__udivmodhi4_loop>:
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	a6 17       	cp	r26, r22
    2064:	b7 07       	cpc	r27, r23
    2066:	10 f0       	brcs	.+4      	; 0x206c <__udivmodhi4_ep>
    2068:	a6 1b       	sub	r26, r22
    206a:	b7 0b       	sbc	r27, r23

0000206c <__udivmodhi4_ep>:
    206c:	88 1f       	adc	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	5a 95       	dec	r21
    2072:	a9 f7       	brne	.-22     	; 0x205e <__udivmodhi4_loop>
    2074:	80 95       	com	r24
    2076:	90 95       	com	r25
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	08 95       	ret

0000207e <__ftoa_engine>:
    207e:	28 30       	cpi	r18, 0x08	; 8
    2080:	08 f0       	brcs	.+2      	; 0x2084 <__ftoa_engine+0x6>
    2082:	27 e0       	ldi	r18, 0x07	; 7
    2084:	33 27       	eor	r19, r19
    2086:	da 01       	movw	r26, r20
    2088:	99 0f       	add	r25, r25
    208a:	31 1d       	adc	r19, r1
    208c:	87 fd       	sbrc	r24, 7
    208e:	91 60       	ori	r25, 0x01	; 1
    2090:	00 96       	adiw	r24, 0x00	; 0
    2092:	61 05       	cpc	r22, r1
    2094:	71 05       	cpc	r23, r1
    2096:	39 f4       	brne	.+14     	; 0x20a6 <__ftoa_engine+0x28>
    2098:	32 60       	ori	r19, 0x02	; 2
    209a:	2e 5f       	subi	r18, 0xFE	; 254
    209c:	3d 93       	st	X+, r19
    209e:	30 e3       	ldi	r19, 0x30	; 48
    20a0:	2a 95       	dec	r18
    20a2:	e1 f7       	brne	.-8      	; 0x209c <__ftoa_engine+0x1e>
    20a4:	08 95       	ret
    20a6:	9f 3f       	cpi	r25, 0xFF	; 255
    20a8:	30 f0       	brcs	.+12     	; 0x20b6 <__ftoa_engine+0x38>
    20aa:	80 38       	cpi	r24, 0x80	; 128
    20ac:	71 05       	cpc	r23, r1
    20ae:	61 05       	cpc	r22, r1
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <__ftoa_engine+0x36>
    20b2:	3c 5f       	subi	r19, 0xFC	; 252
    20b4:	3c 5f       	subi	r19, 0xFC	; 252
    20b6:	3d 93       	st	X+, r19
    20b8:	91 30       	cpi	r25, 0x01	; 1
    20ba:	08 f0       	brcs	.+2      	; 0x20be <__ftoa_engine+0x40>
    20bc:	80 68       	ori	r24, 0x80	; 128
    20be:	91 1d       	adc	r25, r1
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	1f 93       	push	r17
    20c6:	0f 93       	push	r16
    20c8:	ff 92       	push	r15
    20ca:	ef 92       	push	r14
    20cc:	19 2f       	mov	r17, r25
    20ce:	98 7f       	andi	r25, 0xF8	; 248
    20d0:	96 95       	lsr	r25
    20d2:	e9 2f       	mov	r30, r25
    20d4:	96 95       	lsr	r25
    20d6:	96 95       	lsr	r25
    20d8:	e9 0f       	add	r30, r25
    20da:	ff 27       	eor	r31, r31
    20dc:	ea 54       	subi	r30, 0x4A	; 74
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	99 27       	eor	r25, r25
    20e2:	33 27       	eor	r19, r19
    20e4:	ee 24       	eor	r14, r14
    20e6:	ff 24       	eor	r15, r15
    20e8:	a7 01       	movw	r20, r14
    20ea:	e7 01       	movw	r28, r14
    20ec:	05 90       	lpm	r0, Z+
    20ee:	08 94       	sec
    20f0:	07 94       	ror	r0
    20f2:	28 f4       	brcc	.+10     	; 0x20fe <__ftoa_engine+0x80>
    20f4:	36 0f       	add	r19, r22
    20f6:	e7 1e       	adc	r14, r23
    20f8:	f8 1e       	adc	r15, r24
    20fa:	49 1f       	adc	r20, r25
    20fc:	51 1d       	adc	r21, r1
    20fe:	66 0f       	add	r22, r22
    2100:	77 1f       	adc	r23, r23
    2102:	88 1f       	adc	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	06 94       	lsr	r0
    2108:	a1 f7       	brne	.-24     	; 0x20f2 <__ftoa_engine+0x74>
    210a:	05 90       	lpm	r0, Z+
    210c:	07 94       	ror	r0
    210e:	28 f4       	brcc	.+10     	; 0x211a <__ftoa_engine+0x9c>
    2110:	e7 0e       	add	r14, r23
    2112:	f8 1e       	adc	r15, r24
    2114:	49 1f       	adc	r20, r25
    2116:	56 1f       	adc	r21, r22
    2118:	c1 1d       	adc	r28, r1
    211a:	77 0f       	add	r23, r23
    211c:	88 1f       	adc	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	66 1f       	adc	r22, r22
    2122:	06 94       	lsr	r0
    2124:	a1 f7       	brne	.-24     	; 0x210e <__ftoa_engine+0x90>
    2126:	05 90       	lpm	r0, Z+
    2128:	07 94       	ror	r0
    212a:	28 f4       	brcc	.+10     	; 0x2136 <__ftoa_engine+0xb8>
    212c:	f8 0e       	add	r15, r24
    212e:	49 1f       	adc	r20, r25
    2130:	56 1f       	adc	r21, r22
    2132:	c7 1f       	adc	r28, r23
    2134:	d1 1d       	adc	r29, r1
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	66 1f       	adc	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	06 94       	lsr	r0
    2140:	a1 f7       	brne	.-24     	; 0x212a <__ftoa_engine+0xac>
    2142:	05 90       	lpm	r0, Z+
    2144:	07 94       	ror	r0
    2146:	20 f4       	brcc	.+8      	; 0x2150 <__ftoa_engine+0xd2>
    2148:	49 0f       	add	r20, r25
    214a:	56 1f       	adc	r21, r22
    214c:	c7 1f       	adc	r28, r23
    214e:	d8 1f       	adc	r29, r24
    2150:	99 0f       	add	r25, r25
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	06 94       	lsr	r0
    215a:	a9 f7       	brne	.-22     	; 0x2146 <__ftoa_engine+0xc8>
    215c:	84 91       	lpm	r24, Z+
    215e:	10 95       	com	r17
    2160:	17 70       	andi	r17, 0x07	; 7
    2162:	41 f0       	breq	.+16     	; 0x2174 <__ftoa_engine+0xf6>
    2164:	d6 95       	lsr	r29
    2166:	c7 95       	ror	r28
    2168:	57 95       	ror	r21
    216a:	47 95       	ror	r20
    216c:	f7 94       	ror	r15
    216e:	e7 94       	ror	r14
    2170:	1a 95       	dec	r17
    2172:	c1 f7       	brne	.-16     	; 0x2164 <__ftoa_engine+0xe6>
    2174:	ec e5       	ldi	r30, 0x5C	; 92
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	68 94       	set
    217a:	15 90       	lpm	r1, Z+
    217c:	15 91       	lpm	r17, Z+
    217e:	35 91       	lpm	r19, Z+
    2180:	65 91       	lpm	r22, Z+
    2182:	95 91       	lpm	r25, Z+
    2184:	05 90       	lpm	r0, Z+
    2186:	7f e2       	ldi	r23, 0x2F	; 47
    2188:	73 95       	inc	r23
    218a:	e1 18       	sub	r14, r1
    218c:	f1 0a       	sbc	r15, r17
    218e:	43 0b       	sbc	r20, r19
    2190:	56 0b       	sbc	r21, r22
    2192:	c9 0b       	sbc	r28, r25
    2194:	d0 09       	sbc	r29, r0
    2196:	c0 f7       	brcc	.-16     	; 0x2188 <__ftoa_engine+0x10a>
    2198:	e1 0c       	add	r14, r1
    219a:	f1 1e       	adc	r15, r17
    219c:	43 1f       	adc	r20, r19
    219e:	56 1f       	adc	r21, r22
    21a0:	c9 1f       	adc	r28, r25
    21a2:	d0 1d       	adc	r29, r0
    21a4:	7e f4       	brtc	.+30     	; 0x21c4 <__ftoa_engine+0x146>
    21a6:	70 33       	cpi	r23, 0x30	; 48
    21a8:	11 f4       	brne	.+4      	; 0x21ae <__ftoa_engine+0x130>
    21aa:	8a 95       	dec	r24
    21ac:	e6 cf       	rjmp	.-52     	; 0x217a <__ftoa_engine+0xfc>
    21ae:	e8 94       	clt
    21b0:	01 50       	subi	r16, 0x01	; 1
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <__ftoa_engine+0x142>
    21b4:	08 0f       	add	r16, r24
    21b6:	0a f4       	brpl	.+2      	; 0x21ba <__ftoa_engine+0x13c>
    21b8:	00 27       	eor	r16, r16
    21ba:	02 17       	cp	r16, r18
    21bc:	08 f4       	brcc	.+2      	; 0x21c0 <__ftoa_engine+0x142>
    21be:	20 2f       	mov	r18, r16
    21c0:	23 95       	inc	r18
    21c2:	02 2f       	mov	r16, r18
    21c4:	7a 33       	cpi	r23, 0x3A	; 58
    21c6:	28 f0       	brcs	.+10     	; 0x21d2 <__ftoa_engine+0x154>
    21c8:	79 e3       	ldi	r23, 0x39	; 57
    21ca:	7d 93       	st	X+, r23
    21cc:	2a 95       	dec	r18
    21ce:	e9 f7       	brne	.-6      	; 0x21ca <__ftoa_engine+0x14c>
    21d0:	10 c0       	rjmp	.+32     	; 0x21f2 <__ftoa_engine+0x174>
    21d2:	7d 93       	st	X+, r23
    21d4:	2a 95       	dec	r18
    21d6:	89 f6       	brne	.-94     	; 0x217a <__ftoa_engine+0xfc>
    21d8:	06 94       	lsr	r0
    21da:	97 95       	ror	r25
    21dc:	67 95       	ror	r22
    21de:	37 95       	ror	r19
    21e0:	17 95       	ror	r17
    21e2:	17 94       	ror	r1
    21e4:	e1 18       	sub	r14, r1
    21e6:	f1 0a       	sbc	r15, r17
    21e8:	43 0b       	sbc	r20, r19
    21ea:	56 0b       	sbc	r21, r22
    21ec:	c9 0b       	sbc	r28, r25
    21ee:	d0 09       	sbc	r29, r0
    21f0:	98 f0       	brcs	.+38     	; 0x2218 <__ftoa_engine+0x19a>
    21f2:	23 95       	inc	r18
    21f4:	7e 91       	ld	r23, -X
    21f6:	73 95       	inc	r23
    21f8:	7a 33       	cpi	r23, 0x3A	; 58
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <__ftoa_engine+0x180>
    21fc:	70 e3       	ldi	r23, 0x30	; 48
    21fe:	7c 93       	st	X, r23
    2200:	20 13       	cpse	r18, r16
    2202:	b8 f7       	brcc	.-18     	; 0x21f2 <__ftoa_engine+0x174>
    2204:	7e 91       	ld	r23, -X
    2206:	70 61       	ori	r23, 0x10	; 16
    2208:	7d 93       	st	X+, r23
    220a:	30 f0       	brcs	.+12     	; 0x2218 <__ftoa_engine+0x19a>
    220c:	83 95       	inc	r24
    220e:	71 e3       	ldi	r23, 0x31	; 49
    2210:	7d 93       	st	X+, r23
    2212:	70 e3       	ldi	r23, 0x30	; 48
    2214:	2a 95       	dec	r18
    2216:	e1 f7       	brne	.-8      	; 0x2210 <__ftoa_engine+0x192>
    2218:	11 24       	eor	r1, r1
    221a:	ef 90       	pop	r14
    221c:	ff 90       	pop	r15
    221e:	0f 91       	pop	r16
    2220:	1f 91       	pop	r17
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	99 27       	eor	r25, r25
    2228:	87 fd       	sbrc	r24, 7
    222a:	90 95       	com	r25
    222c:	08 95       	ret

0000222e <strnlen_P>:
    222e:	fc 01       	movw	r30, r24
    2230:	05 90       	lpm	r0, Z+
    2232:	61 50       	subi	r22, 0x01	; 1
    2234:	70 40       	sbci	r23, 0x00	; 0
    2236:	01 10       	cpse	r0, r1
    2238:	d8 f7       	brcc	.-10     	; 0x2230 <strnlen_P+0x2>
    223a:	80 95       	com	r24
    223c:	90 95       	com	r25
    223e:	8e 0f       	add	r24, r30
    2240:	9f 1f       	adc	r25, r31
    2242:	08 95       	ret

00002244 <strnlen>:
    2244:	fc 01       	movw	r30, r24
    2246:	61 50       	subi	r22, 0x01	; 1
    2248:	70 40       	sbci	r23, 0x00	; 0
    224a:	01 90       	ld	r0, Z+
    224c:	01 10       	cpse	r0, r1
    224e:	d8 f7       	brcc	.-10     	; 0x2246 <strnlen+0x2>
    2250:	80 95       	com	r24
    2252:	90 95       	com	r25
    2254:	8e 0f       	add	r24, r30
    2256:	9f 1f       	adc	r25, r31
    2258:	08 95       	ret

0000225a <fputc>:
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	8c 01       	movw	r16, r24
    2264:	eb 01       	movw	r28, r22
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	81 ff       	sbrs	r24, 1
    226a:	1b c0       	rjmp	.+54     	; 0x22a2 <fputc+0x48>
    226c:	82 ff       	sbrs	r24, 2
    226e:	0d c0       	rjmp	.+26     	; 0x228a <fputc+0x30>
    2270:	2e 81       	ldd	r18, Y+6	; 0x06
    2272:	3f 81       	ldd	r19, Y+7	; 0x07
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	9d 81       	ldd	r25, Y+5	; 0x05
    2278:	28 17       	cp	r18, r24
    227a:	39 07       	cpc	r19, r25
    227c:	64 f4       	brge	.+24     	; 0x2296 <fputc+0x3c>
    227e:	e8 81       	ld	r30, Y
    2280:	f9 81       	ldd	r31, Y+1	; 0x01
    2282:	01 93       	st	Z+, r16
    2284:	f9 83       	std	Y+1, r31	; 0x01
    2286:	e8 83       	st	Y, r30
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <fputc+0x3c>
    228a:	e8 85       	ldd	r30, Y+8	; 0x08
    228c:	f9 85       	ldd	r31, Y+9	; 0x09
    228e:	80 2f       	mov	r24, r16
    2290:	09 95       	icall
    2292:	89 2b       	or	r24, r25
    2294:	31 f4       	brne	.+12     	; 0x22a2 <fputc+0x48>
    2296:	8e 81       	ldd	r24, Y+6	; 0x06
    2298:	9f 81       	ldd	r25, Y+7	; 0x07
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	9f 83       	std	Y+7, r25	; 0x07
    229e:	8e 83       	std	Y+6, r24	; 0x06
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <fputc+0x4c>
    22a2:	0f ef       	ldi	r16, 0xFF	; 255
    22a4:	1f ef       	ldi	r17, 0xFF	; 255
    22a6:	c8 01       	movw	r24, r16
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	08 95       	ret

000022b2 <__ultoa_invert>:
    22b2:	fa 01       	movw	r30, r20
    22b4:	aa 27       	eor	r26, r26
    22b6:	28 30       	cpi	r18, 0x08	; 8
    22b8:	51 f1       	breq	.+84     	; 0x230e <__ultoa_invert+0x5c>
    22ba:	20 31       	cpi	r18, 0x10	; 16
    22bc:	81 f1       	breq	.+96     	; 0x231e <__ultoa_invert+0x6c>
    22be:	e8 94       	clt
    22c0:	6f 93       	push	r22
    22c2:	6e 7f       	andi	r22, 0xFE	; 254
    22c4:	6e 5f       	subi	r22, 0xFE	; 254
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	af 4f       	sbci	r26, 0xFF	; 255
    22ce:	b1 e0       	ldi	r27, 0x01	; 1
    22d0:	3e d0       	rcall	.+124    	; 0x234e <__ultoa_invert+0x9c>
    22d2:	b4 e0       	ldi	r27, 0x04	; 4
    22d4:	3c d0       	rcall	.+120    	; 0x234e <__ultoa_invert+0x9c>
    22d6:	67 0f       	add	r22, r23
    22d8:	78 1f       	adc	r23, r24
    22da:	89 1f       	adc	r24, r25
    22dc:	9a 1f       	adc	r25, r26
    22de:	a1 1d       	adc	r26, r1
    22e0:	68 0f       	add	r22, r24
    22e2:	79 1f       	adc	r23, r25
    22e4:	8a 1f       	adc	r24, r26
    22e6:	91 1d       	adc	r25, r1
    22e8:	a1 1d       	adc	r26, r1
    22ea:	6a 0f       	add	r22, r26
    22ec:	71 1d       	adc	r23, r1
    22ee:	81 1d       	adc	r24, r1
    22f0:	91 1d       	adc	r25, r1
    22f2:	a1 1d       	adc	r26, r1
    22f4:	20 d0       	rcall	.+64     	; 0x2336 <__ultoa_invert+0x84>
    22f6:	09 f4       	brne	.+2      	; 0x22fa <__ultoa_invert+0x48>
    22f8:	68 94       	set
    22fa:	3f 91       	pop	r19
    22fc:	2a e0       	ldi	r18, 0x0A	; 10
    22fe:	26 9f       	mul	r18, r22
    2300:	11 24       	eor	r1, r1
    2302:	30 19       	sub	r19, r0
    2304:	30 5d       	subi	r19, 0xD0	; 208
    2306:	31 93       	st	Z+, r19
    2308:	de f6       	brtc	.-74     	; 0x22c0 <__ultoa_invert+0xe>
    230a:	cf 01       	movw	r24, r30
    230c:	08 95       	ret
    230e:	46 2f       	mov	r20, r22
    2310:	47 70       	andi	r20, 0x07	; 7
    2312:	40 5d       	subi	r20, 0xD0	; 208
    2314:	41 93       	st	Z+, r20
    2316:	b3 e0       	ldi	r27, 0x03	; 3
    2318:	0f d0       	rcall	.+30     	; 0x2338 <__ultoa_invert+0x86>
    231a:	c9 f7       	brne	.-14     	; 0x230e <__ultoa_invert+0x5c>
    231c:	f6 cf       	rjmp	.-20     	; 0x230a <__ultoa_invert+0x58>
    231e:	46 2f       	mov	r20, r22
    2320:	4f 70       	andi	r20, 0x0F	; 15
    2322:	40 5d       	subi	r20, 0xD0	; 208
    2324:	4a 33       	cpi	r20, 0x3A	; 58
    2326:	18 f0       	brcs	.+6      	; 0x232e <__ultoa_invert+0x7c>
    2328:	49 5d       	subi	r20, 0xD9	; 217
    232a:	31 fd       	sbrc	r19, 1
    232c:	40 52       	subi	r20, 0x20	; 32
    232e:	41 93       	st	Z+, r20
    2330:	02 d0       	rcall	.+4      	; 0x2336 <__ultoa_invert+0x84>
    2332:	a9 f7       	brne	.-22     	; 0x231e <__ultoa_invert+0x6c>
    2334:	ea cf       	rjmp	.-44     	; 0x230a <__ultoa_invert+0x58>
    2336:	b4 e0       	ldi	r27, 0x04	; 4
    2338:	a6 95       	lsr	r26
    233a:	97 95       	ror	r25
    233c:	87 95       	ror	r24
    233e:	77 95       	ror	r23
    2340:	67 95       	ror	r22
    2342:	ba 95       	dec	r27
    2344:	c9 f7       	brne	.-14     	; 0x2338 <__ultoa_invert+0x86>
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	61 05       	cpc	r22, r1
    234a:	71 05       	cpc	r23, r1
    234c:	08 95       	ret
    234e:	9b 01       	movw	r18, r22
    2350:	ac 01       	movw	r20, r24
    2352:	0a 2e       	mov	r0, r26
    2354:	06 94       	lsr	r0
    2356:	57 95       	ror	r21
    2358:	47 95       	ror	r20
    235a:	37 95       	ror	r19
    235c:	27 95       	ror	r18
    235e:	ba 95       	dec	r27
    2360:	c9 f7       	brne	.-14     	; 0x2354 <__ultoa_invert+0xa2>
    2362:	62 0f       	add	r22, r18
    2364:	73 1f       	adc	r23, r19
    2366:	84 1f       	adc	r24, r20
    2368:	95 1f       	adc	r25, r21
    236a:	a0 1d       	adc	r26, r0
    236c:	08 95       	ret

0000236e <_exit>:
    236e:	f8 94       	cli

00002370 <__stop_program>:
    2370:	ff cf       	rjmp	.-2      	; 0x2370 <__stop_program>
